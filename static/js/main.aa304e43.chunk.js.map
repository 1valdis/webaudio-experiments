{"version":3,"sources":["components/Player/Timeline/LoadingIndicator/LoadingIndicator.jsx","components/Player/Timeline/Timeline.jsx","components/Player/ProgressiveTimeline/Timeline.jsx","components/Player/PlayPause/PlayPause.jsx","components/AudioOpener/AudioOpener.jsx","components/Player/Player.jsx","components/WorkletWhiteNoise/WhiteNoise.jsx","components/TracklinesDemo/TracklinesDemo.jsx","App.jsx","index.js"],"names":["props","hidden","percentage","className","Timeline","args","state","secondsPerPixel","renderingPercentage","resize","bind","this","audioBuffer","renderCanvas","window","addEventListener","blob","Blob","type","workerUrl","URL","createObjectURL","worker","Worker","ctx","canvas","getContext","onmessage","e","imageData","ImageData","Uint8ClampedArray","data","buffer","width","height","putImageData","removeEventListener","terminate","revokeObjectURL","audioCtx","setState","Math","floor","currentTime","duration","requestAnimationFrame","updateRenderingPercentage","ceil","OfflineAudioContext","length","sampleRate","sourceNode","createBufferSource","analyzerNode","createAnalyser","fftSize","smoothingTimeConstant","connect","destination","start","suspendTimes","Array","from","value","index","frequencySlicesByTimePromises","map","time","a","suspend","frequencyData","Uint8Array","frequencyBinCount","getByteFrequencyData","resume","startRendering","Promise","all","frequencySlicesByTime","frequencySlicesByTimeBuffers","array","postMessage","forceUpdate","offsetPixels","min","max","parentElement","clientWidth","ref","style","marginLeft","left","LoadingIndicator","toString","step","onInput","onCurrentTimeChange","onChange","PureComponent","renderFrequencyDataAroundCurrentTime","throttle","graphContainer","offscreen","transferControlToOffscreen","totalWidth","currentlyRendering","notRenderedSlices","IntegerRange","startPixel","round","endPixel","rangeToRender","intersect","subtract","numberOfChannels","promises","push","getFrequencyDataAtTime","slice","slicesForWorker","slices","end","el","graphWidth","onClick","disabled","isPlaying","isWorking","id","accept","openFile","target","files","reader","FileReader","onload","audioContext","decodeAudioData","result","onOpen","readAsArrayBuffer","Player","audioBufferKey","startTime","AudioContext","close","TimelineToRender","progressiveTimeline","ProgressiveTimeline","currentTimeChanged","key","pause","play","fileOpened","disconnect","stop","updateCurrentTime","WhiteNoize","initializing","init","audioWorklet","addModule","whiteNoiseNode","AudioWorkletNode","parameters","get","linearRampToValueAtTime","TracklinesDemo","App","exact","path","component","to","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa304e43.chunk.js","sourcesContent":["import React from 'react'\n\nimport './style.css'\n\nexport default (props) => {\n  if (props.hidden) return null\n  else if (props.percentage) {\n    return <div className='loading'>{`Loading... ${props.percentage}%`}</div>\n  } else {\n    return <div className='loading'>Loading...</div>\n  }\n}\n","import React, { PureComponent } from 'react'\n\nimport LoadingIndicator from './LoadingIndicator/LoadingIndicator'\n\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02,\n      renderingPercentage: 0\n    }\n    this.resize = this.resize.bind(this)\n  }\n  componentDidMount () {\n    if (this.props.audioBuffer) { this.renderCanvas() }\n    window.addEventListener('resize', this.resize)\n\n    const workerCode = `\n    const gradient = [ [0,0,0], [0,0,1], [0,0,3], [0,0,4], [0,0,6], [0,0,7], [0,0,9], [0,0,10], [0,0,12], [0,0,13], [0,0,15], [0,0,16], [0,0,18], [0,0,19], [0,0,21], [0,0,22], [0,0,24], [0,0,25], [0,0,26], [0,0,28], [0,0,29], [0,0,31], [0,0,32], [0,0,34], [0,0,35], [0,0,37], [0,0,38], [0,0,40], [0,0,41], [0,0,43], [0,0,44], [0,0,46], [0,0,47], [0,0,49], [0,0,50], [0,0,51], [0,0,53], [0,0,54], [0,0,56], [0,0,57], [0,0,59], [0,0,60], [0,0,62], [0,0,63], [0,0,65], [0,0,66], [0,0,68], [0,0,69], [0,0,71], [0,0,72], [0,0,74], [0,0,75], [0,0,76], [0,0,78], [0,0,79], [0,0,81], [0,0,82], [0,0,84], [0,0,85], [0,0,87], [0,0,88], [0,0,90], [0,0,91], [0,0,93], [0,0,94], [0,0,96], [0,0,97], [0,0,99], [0,0,100], [2,0,101], [4,0,101], [6,0,102], [8,0,102], [10,0,103], [11,0,103], [13,0,104], [15,0,104], [17,0,105], [19,0,105], [21,0,106], [23,0,106], [25,0,107], [27,0,107], [29,0,108], [30,0,108], [32,0,109], [34,0,110], [36,0,110], [38,0,111], [40,0,111], [42,0,112], [44,0,112], [46,0,113], [48,0,113], [49,0,114], [51,0,114], [53,0,115], [57,0,116], [59,0,116], [61,0,117], [63,0,118], [65,0,118], [67,0,119], [68,0,119], [70,0,120], [72,0,120], [74,0,121], [76,0,121], [78,0,122], [80,0,122], [82,0,123], [84,0,123], [86,0,124], [87,0,124], [89,0,125], [91,0,125], [93,0,126], [95,0,127], [97,0,127], [99,0,128], [101,0,128], [103,0,129], [105,0,129], [106,0,130], [108,0,130], [110,0,131], [112,0,131], [114,0,132], [116,0,132], [118,0,133], [120,0,133], [122,0,134], [124,0,135], [125,0,135], [127,0,136], [129,0,136], [131,0,137], [133,0,137], [135,0,138], [137,0,138], [139,0,139], [141,0,139], [143,0,140], [144,0,140], [146,0,141], [148,0,141], [150,0,142], [152,0,142], [154,0,143], [156,4,142], [158,8,142], [160,11,141], [162,15,141], [165,19,140], [165,19,140], [167,23,140], [169,27,139], [171,31,139], [173,34,138], [175,38,137], [177,42,137], [179,46,136], [181,50,136], [183,53,135], [186,57,135], [188,61,134], [190,65,133], [192,69,133], [194,72,132], [194,72,132], [196,76,132], [198,80,131], [200,84,131], [202,88,130], [205,92,130], [207,95,129], [209,99,128], [211,103,128], [213,107,127], [215,111,127], [217,114,126], [219,118,126], [219,118,126], [221,122,125], [223,126,124], [226,130,124], [228,133,123], [230,137,123], [232,141,122], [234,145,122], [236,149,121], [236,149,121], [238,153,121], [240,156,120], [242,160,119], [244,164,119], [247,168,118], [249,172,118], [251,175,117], [253,179,117], [255,183,116], [255,184,119], [255,186,121], [255,187,124], [255,188,126], [255,190,129], [255,191,131], [255,192,134], [255,193,136], [255,195,139], [255,196,141], [255,197,144], [255,199,146], [255,200,149], [255,201,151], [255,203,154], [255,204,156], [255,205,159], [255,207,161], [255,208,164], [255,209,167], [255,210,169], [255,212,172], [255,213,174], [255,214,177], [255,216,179], [255,217,182], [255,218,184], [255,220,187], [255,221,189], [255,222,192], [255,224,194], [255,225,197], [255,226,199], [255,228,202], [255,229,204], [255,230,207], [255,231,210], [255,233,212], [255,234,215], [255,235,217], [255,237,220], [255,238,222], [255,239,225], [255,241,227], [255,242,230], [255,243,232], [255,245,235], [255,246,237], [255,247,240], [255,248,242], [255,250,245], [255,251,247], [255,252,250], [255,254,252], [255,255,255]]\n    let ctx = null\n    onmessage = e => {\n      if (e.data.canvas) ctx = e.data.canvas.getContext(\"2d\")\n      else {\n        const arrays = e.data.map(buffer => new Uint8Array(buffer))\n        const width = arrays.length\n        const height = arrays[0].length\n        const imageData = new ImageData(width, height)\n\n        const data = new Uint32Array(imageData.data.buffer)\n\n        for (let y = 0; y < height; ++y) {\n          for (let x = 0; x < width; ++x) {\n            const value = arrays[x][height - y - 1]\n            data[y * width + x] =\n                    (255 << 24) | // alpha\n                    (gradient[value][2] << 16) | // blue\n                    (gradient[value][1] << 8) | // green\n                    gradient[value][0] // red\n          }\n        }\n        postMessage({buffer: imageData.data.buffer, width: imageData.width, height: imageData.height}, [imageData.data.buffer])\n      }\n    }\n  `\n    const blob = new window.Blob([workerCode], { type: 'text/javascript' })\n    this.workerUrl = URL.createObjectURL(blob)\n    this.worker = new window.Worker(this.workerUrl)\n    this.ctx = this.canvas.getContext('2d')\n    this.worker.onmessage = e => {\n      const imageData = new window.ImageData(new Uint8ClampedArray(e.data.buffer), e.data.width, e.data.height)\n      this.canvas.width = e.data.width\n      this.canvas.height = e.data.height\n      this.ctx.putImageData(imageData, 0, 0)\n    }\n  }\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.resize)\n    this.worker.terminate()\n    URL.revokeObjectURL(this.workerUrl)\n  }\n  updateRenderingPercentage (audioCtx, audioBuffer) {\n    this.setState({\n      renderingPercentage: Math.floor(audioCtx.currentTime / audioBuffer.duration * 100)\n    })\n    if (audioCtx.currentTime !== this.props.audioBuffer.duration) {\n      window.requestAnimationFrame(() => this.updateRenderingPercentage(audioCtx, audioBuffer))\n    }\n  }\n  async renderCanvas () {\n    const width = Math.ceil(this.props.audioBuffer ? this.props.audioBuffer.duration / this.state.secondsPerPixel : 0)\n    const height = 1024\n    const audioCtx = new window.OfflineAudioContext(2, this.props.audioBuffer.length, this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = height * 2\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start()\n\n    const suspendTimes = Array.from({ length: width }, (value, index) => this.state.secondsPerPixel * index)\n    const frequencySlicesByTimePromises = suspendTimes\n      .map(async time => {\n        await audioCtx.suspend(time)\n        const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n        analyzerNode.getByteFrequencyData(frequencyData)\n        await audioCtx.resume()\n        return frequencyData\n      })\n    this.updateRenderingPercentage(audioCtx, this.props.audioBuffer)\n    await audioCtx.startRendering()\n    const frequencySlicesByTime = await Promise.all(frequencySlicesByTimePromises)\n    const frequencySlicesByTimeBuffers = frequencySlicesByTime.map(array => array.buffer)\n    this.worker.postMessage(frequencySlicesByTimeBuffers, frequencySlicesByTimeBuffers)\n  }\n  resize () {\n    if (this.props.audioBuffer) {\n      this.forceUpdate()\n    }\n  }\n  render () {\n    const offsetPixels = Math.min(\n      this.ctx ? Math.max(this.props.currentTime / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth / 2, 0) : 0,\n      this.ctx ? this.props.audioBuffer.duration / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth : 0\n    )\n    return <div className='timeline'>\n      <div className='frequencygraph'>\n        <canvas\n          ref={canvas => { this.canvas = canvas }}\n          style={{ marginLeft: -offsetPixels }}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n        <LoadingIndicator hidden={!this.props.audioBuffer || this.state.renderingPercentage === 100} percentage={this.state.renderingPercentage} />\n      </div>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} onChange={() => {}} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport IntegerRange from 'multi-integer-range'\nimport './style.css'\nimport throttle from 'lodash.throttle'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02\n    }\n    // this.resize = this.resize.bind(this)\n    this.worker = new window.Worker('timeline-renderer-worker.js')\n    this.renderFrequencyDataAroundCurrentTime = throttle(this.renderFrequencyDataAroundCurrentTime, 300)\n  }\n  componentDidMount () {\n    // window.addEventListener('resize', this.resize)\n\n    this.canvas.width = this.graphContainer.clientWidth\n    const offscreen = this.canvas.transferControlToOffscreen()\n    this.worker.postMessage({ canvas: offscreen, secondsPerPixel: this.state.secondsPerPixel, totalWidth: this.props.audioBuffer ? Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel) : 0 }, [offscreen])\n    this.renderFrequencyDataAroundCurrentTime()\n  }\n  componentDidUpdate () {\n    this.worker.postMessage({ currentTime: this.props.currentTime })\n    this.renderFrequencyDataAroundCurrentTime()\n  }\n  componentWillUnmount () {\n    // window.removeEventListener('resize', this.resize)\n    this.worker.terminate()\n  }\n  async renderFrequencyDataAroundCurrentTime () {\n    if (!this.props.audioBuffer) return\n\n    if (this.currentlyRendering) return\n\n    if (!this.graphContainer) return\n\n    if (!this.frequencySlicesByTime) {\n      this.notRenderedSlices = new IntegerRange([[0, Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel)]])\n      this.frequencySlicesByTime = new Array(Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel))\n    }\n\n    const startPixel = Math.max(\n      0,\n      Math.round(this.props.currentTime / this.state.secondsPerPixel - this.graphContainer.clientWidth)\n    )\n    const endPixel = Math.min(\n      Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel) - 1,\n      Math.round(this.props.currentTime / this.state.secondsPerPixel + this.graphContainer.clientWidth)\n    )\n\n    const rangeToRender = new IntegerRange([[startPixel, endPixel]])\n      .intersect(this.notRenderedSlices)\n    this.notRenderedSlices.subtract(rangeToRender)\n\n    if (!rangeToRender.length()) return\n    this.currentlyRendering = true\n    const audioCtx = new window.OfflineAudioContext(this.props.audioBuffer.numberOfChannels, ~~((rangeToRender.max() - rangeToRender.min() + 2) * this.state.secondsPerPixel * this.props.audioBuffer.sampleRate), this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = 2048\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start(0, rangeToRender.min() * this.state.secondsPerPixel)\n\n    const promises = []\n    // todo we should have at least 2*fftSize samples of data before analyze\n    for (const index of rangeToRender) {\n      const time = (index - rangeToRender.min() + 1) * this.state.secondsPerPixel\n      promises.push((async () => {\n        const slice = await this.getFrequencyDataAtTime(audioCtx, analyzerNode, time)\n        this.frequencySlicesByTime[index] = slice\n      })())\n    }\n    await audioCtx.startRendering()\n    await Promise.all(\n      promises\n    )\n\n    this.currentlyRendering = false\n    const slicesForWorker = this.frequencySlicesByTime.slice(rangeToRender.min(), rangeToRender.max() + 1).map(array => array.buffer)\n    this.worker.postMessage({ slices: slicesForWorker, start: rangeToRender.min(), end: rangeToRender.max() }, slicesForWorker)\n  }\n  async getFrequencyDataAtTime (audioCtx, analyzerNode, time) {\n    await audioCtx.suspend(time)\n    const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n    analyzerNode.getByteFrequencyData(frequencyData)\n    await audioCtx.resume()\n    return frequencyData\n  }\n  render () {\n    const offsetPixels = this.props.audioBuffer && this.canvas ? Math.min(\n      Math.max(this.props.currentTime / this.state.secondsPerPixel - this.canvas.width / 2, 0),\n      this.props.audioBuffer.duration / this.state.secondsPerPixel - this.canvas.width\n    ) : 0\n    return <div className='timeline'>\n      <div className='frequencygraph' ref={el => { this.graphContainer = el }}>\n        <canvas\n          ref={(canvas) => { this.canvas = canvas }}\n          width={this.state.graphWidth}\n          height={1024}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n      </div>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} onChange={() => {}} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  render () {\n    return <div className='playpause'>\n      <button onClick={this.props.onChange} disabled={this.props.disabled}>{this.props.isPlaying ? 'Pause' : 'Play'}</button>\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      isWorking: false\n    }\n  }\n  render () {\n    return <div className='audioopener'>\n      <input type='file' id='input' accept='audio/*' onChange={(e) => this.openFile(e)} disabled={this.state.isWorking} />\n    </div>\n  }\n  openFile (e) {\n    if (!e.target.files.length) return\n    this.setState({ isWorking: true })\n    const reader = new window.FileReader()\n    reader.onload = async (e) => {\n      const buffer = await this.props.audioContext.decodeAudioData(e.target.result)\n      this.setState({ isWorking: false })\n      this.props.onOpen(buffer)\n    }\n    reader.readAsArrayBuffer(e.target.files[0])\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Timeline from './Timeline/Timeline'\nimport ProgressiveTimeline from './ProgressiveTimeline/Timeline'\nimport PlayPause from './PlayPause/PlayPause'\nimport AudioOpener from '../AudioOpener/AudioOpener'\n// import audioBufferToWave from '../../util/audioBufferToWave'\n\nimport './style.css'\n\nexport default class Player extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      audioBuffer: null,\n      audioBufferKey: 0,\n      currentTime: 0, // time in playing file (in seconds)\n      startTime: 0, // time of file start in audioContext's reference system\n      isPlaying: false\n    }\n    this.audioContext = new window.AudioContext()\n    this.sourceNode = null\n  }\n  componentWillUnmount () {\n    this.audioContext.close()\n  }\n  render () {\n    const TimelineToRender = this.props.progressiveTimeline\n      ? ProgressiveTimeline\n      : Timeline\n    return <div className='player'>\n      <TimelineToRender audioBuffer={this.state.audioBuffer} currentTime={this.state.currentTime} onCurrentTimeChange={(e) => this.currentTimeChanged(+e.target.value)} key={this.state.audioBufferKey} />\n      <PlayPause isPlaying={this.state.isPlaying} onChange={this.state.isPlaying ? () => this.pause() : () => this.play()} disabled={!this.state.audioBuffer} />\n      <AudioOpener audioContext={this.audioContext} onOpen={(buffer) => { this.fileOpened(buffer); this.play() }} />\n    </div>\n  }\n  fileOpened (buffer) {\n    // const func = audioBufferToWave\n    // let href = window.URL.createObjectURL(func(buffer))\n    // let a = document.createElement('a')\n    // a.download = true\n    // a.href = href\n    // document.body.appendChild(a)\n    // a.click()\n    // document.body.removeChild(a)\n    // debugger\n    this.setState((state) => ({\n      audioBuffer: buffer,\n      audioBufferKey: state.audioBufferKey + 1,\n      currentTime: 0,\n      startTime: this.audioContext.currentTime\n    }), () => {\n      if (this.state.isPlaying) {\n        this.play()\n      }\n    })\n  }\n  async play (time = this.state.currentTime) {\n    if (!this.state.audioBuffer) return\n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume()\n    }\n    if (this.sourceNode) {\n      this.sourceNode.disconnect()\n      this.sourceNode.stop()\n    }\n    this.sourceNode = this.audioContext.createBufferSource()\n    this.sourceNode.connect(this.audioContext.destination)\n    this.sourceNode.buffer = this.state.audioBuffer\n    this.sourceNode.start(0, time)\n    if (!this.state.isPlaying) {\n      window.requestAnimationFrame(() => this.updateCurrentTime())\n    }\n    this.setState({\n      isPlaying: true,\n      startTime: this.audioContext.currentTime - time\n    })\n  }\n  updateCurrentTime () {\n    this.setState(state => {\n      if (state.isPlaying) {\n        return {\n          currentTime: this.audioContext.currentTime - state.startTime\n        }\n      }\n      return {}\n    }, () => this.state.isPlaying && window.requestAnimationFrame(() => this.updateCurrentTime()))\n  }\n  async pause () {\n    this.sourceNode.disconnect()\n    this.sourceNode.stop()\n    this.sourceNode = null\n    this.setState(state => ({\n      isPlaying: false,\n      currentTime: this.audioContext.currentTime - state.startTime\n    }))\n  }\n  currentTimeChanged (time) {\n    if (this.state.isPlaying) {\n      this.play(time)\n    } else {\n      this.setState({\n        currentTime: time\n      })\n    }\n  }\n}\n","import React, { PureComponent } from 'react'\n\nexport default class WhiteNoize extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      initializing: true\n    }\n  }\n  componentDidMount () {\n    this.init()\n  }\n  componentWillUnmount () {\n    this.audioContext.close()\n  }\n  async init () {\n    this.audioContext = new window.AudioContext()\n    await this.audioContext.audioWorklet.addModule('white-noise-processor.js')\n    this.whiteNoiseNode = new window.AudioWorkletNode(this.audioContext, 'white-noise-processor')\n    this.whiteNoiseNode.connect(this.audioContext.destination)\n    this.setState({\n      initializing: false\n    })\n  }\n  render () {\n    return <div>\n      <button onClick={() => this.audioContext.resume()} disabled={!this.state.initializing}>play</button>\n      <input type='range' onChange={(e) => this.whiteNoiseNode.parameters.get('customGain').linearRampToValueAtTime(+e.target.value, this.audioContext.currentTime + 0.5)} min='0' max='1' step='0.01' />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\n\nimport AudioOpener from '../AudioOpener/AudioOpener'\n\nexport default class TracklinesDemo extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.audioContext = new window.AudioContext()\n  }\n  render () {\n    return <>\n      <AudioOpener audioContext={this.audioContext} />\n    </>\n  }\n}\n","import React, { Component } from 'react'\nimport { HashRouter, Route, Redirect } from 'react-router-dom'\nimport './App.css'\n\n// import FrequencyGraph from './components/FrequencyGraph/FrequencyGraph'\n// import SingleChannelLiveFrequencyGraph from './components/SingleChannelLiveFrequencyGraph/SingleChannelLiveFrequencyGraph'\nimport Player from './components/Player/Player'\nimport WorkletWhiteNoise from './components/WorkletWhiteNoise/WhiteNoise'\nimport TracklinesDemo from './components/TracklinesDemo/TracklinesDemo'\n\nclass App extends Component {\n  render () {\n    return <div className='App'>\n      <HashRouter>\n        {/* <ul>\n          <li><NavLink to='/player'>Player</NavLink></li>\n          <li><NavLink to='/kek'>Kektus</NavLink></li>\n        </ul> */}\n        <Route exact path='/' component={() => <Redirect to='/player' />} />\n        <Route exact path='/player' component={() => <Player />} />\n        <Route exact path='/player-progressive' component={() => <Player progressiveTimeline />} />\n        <Route exact path='/whitenoise' component={() => <WorkletWhiteNoise />} />\n        <Route exact path='/tracklines' component={() => <TracklinesDemo />} />\n      </HashRouter>\n    </div>\n  }\n}\n\nexport default App\n","import React, { StrictMode } from 'react'\nimport { render } from 'react-dom'\n// import { Provider } from 'react-redux'\n// import { createStore, applyMiddleware, compose } from 'redux'\n// import thunk from 'redux-thunk'\n\nimport App from './App'\n// import * as serviceWorker from './serviceWorker';\n\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}