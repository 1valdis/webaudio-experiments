{"version":3,"sources":["components/Player/Timeline/Timeline.jsx","components/Player/ProgressiveTimeline/Timeline.jsx","components/Player/PlayPause/PlayPause.jsx","components/AudioOpener/AudioOpener.jsx","components/Player/Player.jsx","components/WorkletWhiteNoise/WhiteNoise.jsx","components/TracklinesDemo/TracklinesDemo.jsx","App.jsx","index.js"],"names":["Timeline","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","secondsPerPixel","resize","bind","assertThisInitialized","_this2","props","audioBuffer","renderCanvas","window","addEventListener","blob","Blob","type","workerUrl","URL","createObjectURL","worker","Worker","ctx","canvas","getContext","onmessage","e","imageData","ImageData","Uint8ClampedArray","data","buffer","width","height","putImageData","removeEventListener","terminate","revokeObjectURL","Math","ceil","duration","audioCtx","OfflineAudioContext","sampleRate","sourceNode","createBufferSource","analyzerNode","createAnalyser","fftSize","smoothingTimeConstant","connect","destination","start","suspendTimes","from","value","index","_this3","frequencySlicesByTimePromises","map","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","time","frequencyData","wrap","_context","prev","next","suspend","Uint8Array","frequencyBinCount","getByteFrequencyData","resume","abrupt","stop","_x","rendering","startRendering","Promise","all","frequencySlicesByTime","frequencySlicesByTimeBuffers","array","postMessage","console","log","forceUpdate","_this4","offsetPixels","min","max","currentTime","parentElement","clientWidth","react_default","createElement","className","ref","style","marginLeft","left","toString","step","onInput","onCurrentTimeChange","onChange","PureComponent","renderFrequencyDataAroundCurrentTime","throttle","graphContainer","offscreen","transferControlToOffscreen","totalWidth","currentlyRendering","notRenderedSlices","IntegerRange","startPixel","round","endPixel","rangeToRender","intersect","subtract","numberOfChannels","promises","push","slice","getFrequencyDataAtTime","sent","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","_loop","slicesForWorker","slices","end","el","graphWidth","onClick","disabled","isPlaying","isWorking","id","accept","openFile","target","files","setState","reader","FileReader","onload","audioContext","decodeAudioData","result","onOpen","readAsArrayBuffer","Player","audioBufferKey","startTime","AudioContext","close","TimelineToRender","progressiveTimeline","ProgressiveTimeline","currentTimeChanged","key","PlayPause_Timeline","pause","play","AudioOpener_Timeline","fileOpened","disconnect","requestAnimationFrame","updateCurrentTime","_this5","_this6","WhiteNoize","initializing","init","audioWorklet","addModule","whiteNoiseNode","AudioWorkletNode","parameters","get","linearRampToValueAtTime","TracklinesDemo","Fragment","App","react_router_dom","react_router","exact","path","component","to","Player_Player","WhiteNoise_WhiteNoize","TracklinesDemo_TracklinesDemo","Component","render","react","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.4523a4fe.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02\n    }\n    this.resize = this.resize.bind(this)\n  }\n  componentDidMount () {\n    if (this.props.audioBuffer) { this.renderCanvas() }\n    window.addEventListener('resize', this.resize)\n\n    const workerCode = `\n    const gradient = [ [0,0,0], [0,0,1], [0,0,3], [0,0,4], [0,0,6], [0,0,7], [0,0,9], [0,0,10], [0,0,12], [0,0,13], [0,0,15], [0,0,16], [0,0,18], [0,0,19], [0,0,21], [0,0,22], [0,0,24], [0,0,25], [0,0,26], [0,0,28], [0,0,29], [0,0,31], [0,0,32], [0,0,34], [0,0,35], [0,0,37], [0,0,38], [0,0,40], [0,0,41], [0,0,43], [0,0,44], [0,0,46], [0,0,47], [0,0,49], [0,0,50], [0,0,51], [0,0,53], [0,0,54], [0,0,56], [0,0,57], [0,0,59], [0,0,60], [0,0,62], [0,0,63], [0,0,65], [0,0,66], [0,0,68], [0,0,69], [0,0,71], [0,0,72], [0,0,74], [0,0,75], [0,0,76], [0,0,78], [0,0,79], [0,0,81], [0,0,82], [0,0,84], [0,0,85], [0,0,87], [0,0,88], [0,0,90], [0,0,91], [0,0,93], [0,0,94], [0,0,96], [0,0,97], [0,0,99], [0,0,100], [2,0,101], [4,0,101], [6,0,102], [8,0,102], [10,0,103], [11,0,103], [13,0,104], [15,0,104], [17,0,105], [19,0,105], [21,0,106], [23,0,106], [25,0,107], [27,0,107], [29,0,108], [30,0,108], [32,0,109], [34,0,110], [36,0,110], [38,0,111], [40,0,111], [42,0,112], [44,0,112], [46,0,113], [48,0,113], [49,0,114], [51,0,114], [53,0,115], [57,0,116], [59,0,116], [61,0,117], [63,0,118], [65,0,118], [67,0,119], [68,0,119], [70,0,120], [72,0,120], [74,0,121], [76,0,121], [78,0,122], [80,0,122], [82,0,123], [84,0,123], [86,0,124], [87,0,124], [89,0,125], [91,0,125], [93,0,126], [95,0,127], [97,0,127], [99,0,128], [101,0,128], [103,0,129], [105,0,129], [106,0,130], [108,0,130], [110,0,131], [112,0,131], [114,0,132], [116,0,132], [118,0,133], [120,0,133], [122,0,134], [124,0,135], [125,0,135], [127,0,136], [129,0,136], [131,0,137], [133,0,137], [135,0,138], [137,0,138], [139,0,139], [141,0,139], [143,0,140], [144,0,140], [146,0,141], [148,0,141], [150,0,142], [152,0,142], [154,0,143], [156,4,142], [158,8,142], [160,11,141], [162,15,141], [165,19,140], [165,19,140], [167,23,140], [169,27,139], [171,31,139], [173,34,138], [175,38,137], [177,42,137], [179,46,136], [181,50,136], [183,53,135], [186,57,135], [188,61,134], [190,65,133], [192,69,133], [194,72,132], [194,72,132], [196,76,132], [198,80,131], [200,84,131], [202,88,130], [205,92,130], [207,95,129], [209,99,128], [211,103,128], [213,107,127], [215,111,127], [217,114,126], [219,118,126], [219,118,126], [221,122,125], [223,126,124], [226,130,124], [228,133,123], [230,137,123], [232,141,122], [234,145,122], [236,149,121], [236,149,121], [238,153,121], [240,156,120], [242,160,119], [244,164,119], [247,168,118], [249,172,118], [251,175,117], [253,179,117], [255,183,116], [255,184,119], [255,186,121], [255,187,124], [255,188,126], [255,190,129], [255,191,131], [255,192,134], [255,193,136], [255,195,139], [255,196,141], [255,197,144], [255,199,146], [255,200,149], [255,201,151], [255,203,154], [255,204,156], [255,205,159], [255,207,161], [255,208,164], [255,209,167], [255,210,169], [255,212,172], [255,213,174], [255,214,177], [255,216,179], [255,217,182], [255,218,184], [255,220,187], [255,221,189], [255,222,192], [255,224,194], [255,225,197], [255,226,199], [255,228,202], [255,229,204], [255,230,207], [255,231,210], [255,233,212], [255,234,215], [255,235,217], [255,237,220], [255,238,222], [255,239,225], [255,241,227], [255,242,230], [255,243,232], [255,245,235], [255,246,237], [255,247,240], [255,248,242], [255,250,245], [255,251,247], [255,252,250], [255,254,252], [255,255,255]]\n    let ctx = null\n    onmessage = e => {\n      if (e.data.canvas) ctx = e.data.canvas.getContext(\"2d\")\n      else {\n        const arrays = e.data.map(buffer => new Uint8Array(buffer))\n        const width = arrays.length\n        const height = arrays[0].length\n        //ctx.canvas.width = width\n        //ctx.canvas.height = height\n        //const imageData = ctx.getImageData(0, 0, width, height)\n        const imageData = new ImageData(width, height)\n\n        const data = new Uint32Array(imageData.data.buffer)\n\n        for (let y = 0; y < height; ++y) {\n          for (let x = 0; x < width; ++x) {\n            const value = arrays[x][height - y - 1]\n            data[y * width + x] =\n                    (255 << 24) | // alpha\n                    (gradient[value][2] << 16) | // blue\n                    (gradient[value][1] << 8) | // green\n                    gradient[value][0] // red\n          }\n        }\n        //debugger\n        //ctx.putImageData(imageData, 0, 0)\n        postMessage({buffer: imageData.data.buffer, width: imageData.width, height: imageData.height}, [imageData.data.buffer])\n      }\n      console.log(\"we're good\")\n    }\n  `\n    const blob = new window.Blob([workerCode], { type: 'text/javascript' })\n    this.workerUrl = URL.createObjectURL(blob)\n    this.worker = new window.Worker(this.workerUrl)\n    this.ctx = this.canvas.getContext('2d')\n    this.worker.onmessage = e => {\n      const imageData = new window.ImageData(new Uint8ClampedArray(e.data.buffer), e.data.width, e.data.height)\n      this.canvas.width = e.data.width\n      this.canvas.height = e.data.height\n      this.ctx.putImageData(imageData, 0, 0)\n    }\n  }\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.resize)\n    this.worker.terminate()\n    URL.revokeObjectURL(this.workerUrl)\n  }\n  async renderCanvas () {\n    const width = Math.ceil(this.props.audioBuffer ? this.props.audioBuffer.duration / this.state.secondsPerPixel : 0)\n    const height = 1024\n    const audioCtx = new window.OfflineAudioContext(2, this.props.audioBuffer.length, this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = height * 2\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start()\n\n    const suspendTimes = Array.from({ length: width }, (value, index) => this.state.secondsPerPixel * index)\n    const frequencySlicesByTimePromises = suspendTimes\n      .map(async time => {\n        await audioCtx.suspend(time)\n        const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n        analyzerNode.getByteFrequencyData(frequencyData)\n        await audioCtx.resume()\n        return frequencyData\n      })\n    const rendering = audioCtx.startRendering()\n    const frequencySlicesByTime = await Promise.all(frequencySlicesByTimePromises)\n    const frequencySlicesByTimeBuffers = frequencySlicesByTime.map(array => array.buffer)\n    this.worker.postMessage(frequencySlicesByTimeBuffers, frequencySlicesByTimeBuffers)\n    console.log('message posted')\n    await rendering\n  }\n  resize () {\n    if (this.props.audioBuffer) {\n      this.forceUpdate()\n    }\n  }\n  render () {\n    const offsetPixels = Math.min(\n      this.ctx ? Math.max(this.props.currentTime / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth / 2, 0) : 0,\n      this.ctx ? this.props.audioBuffer.duration / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth : 0\n    )\n    return <div className='timeline'>\n      <div className='frequencygraph'>\n        <canvas\n          ref={canvas => { this.canvas = canvas }}\n          style={{ marginLeft: -offsetPixels }}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n      </div>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} onChange={() => {}} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport IntegerRange from 'multi-integer-range'\nimport './style.css'\nimport throttle from 'lodash.throttle'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02\n    }\n    // this.resize = this.resize.bind(this)\n    this.worker = new window.Worker('timeline-renderer-worker.js')\n    this.renderFrequencyDataAroundCurrentTime = throttle(this.renderFrequencyDataAroundCurrentTime, 300)\n  }\n  componentDidMount () {\n    // window.addEventListener('resize', this.resize)\n\n    this.canvas.width = this.graphContainer.clientWidth\n    const offscreen = this.canvas.transferControlToOffscreen()\n    this.worker.postMessage({ canvas: offscreen, secondsPerPixel: this.state.secondsPerPixel, totalWidth: this.props.audioBuffer ? Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel) : 0 }, [offscreen])\n    this.renderFrequencyDataAroundCurrentTime()\n  }\n  componentDidUpdate () {\n    this.worker.postMessage({ currentTime: this.props.currentTime })\n    this.renderFrequencyDataAroundCurrentTime()\n  }\n  componentWillUnmount () {\n    // window.removeEventListener('resize', this.resize)\n    this.worker.terminate()\n  }\n  async renderFrequencyDataAroundCurrentTime () {\n    if (!this.props.audioBuffer) return\n\n    if (this.currentlyRendering) return\n\n    if (!this.graphContainer) return\n\n    if (!this.frequencySlicesByTime) {\n      this.notRenderedSlices = new IntegerRange([[0, Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel)]])\n      this.frequencySlicesByTime = new Array(Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel))\n    }\n\n    const startPixel = Math.max(\n      0,\n      Math.round(this.props.currentTime / this.state.secondsPerPixel - this.graphContainer.clientWidth)\n    )\n    const endPixel = Math.min(\n      Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel) - 1,\n      Math.round(this.props.currentTime / this.state.secondsPerPixel + this.graphContainer.clientWidth)\n    )\n\n    const rangeToRender = new IntegerRange([[startPixel, endPixel]])\n      .intersect(this.notRenderedSlices)\n    this.notRenderedSlices.subtract(rangeToRender)\n\n    if (!rangeToRender.length()) return\n    this.currentlyRendering = true\n    const audioCtx = new window.OfflineAudioContext(this.props.audioBuffer.numberOfChannels, ~~((rangeToRender.max() - rangeToRender.min() + 2) * this.state.secondsPerPixel * this.props.audioBuffer.sampleRate), this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = 2048\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start(0, rangeToRender.min() * this.state.secondsPerPixel)\n\n    const promises = []\n    // todo we should have at least 2*fftSize samples of data before analyze\n    for (const index of rangeToRender) {\n      const time = (index - rangeToRender.min() + 1) * this.state.secondsPerPixel\n      promises.push((async () => {\n        const slice = await this.getFrequencyDataAtTime(audioCtx, analyzerNode, time)\n        this.frequencySlicesByTime[index] = slice\n      })())\n    }\n    await audioCtx.startRendering()\n    await Promise.all(\n      promises\n    )\n\n    this.currentlyRendering = false\n    const slicesForWorker = this.frequencySlicesByTime.slice(rangeToRender.min(), rangeToRender.max() + 1).map(array => array.buffer)\n    this.worker.postMessage({ slices: slicesForWorker, start: rangeToRender.min(), end: rangeToRender.max() }, slicesForWorker)\n  }\n  async getFrequencyDataAtTime (audioCtx, analyzerNode, time) {\n    await audioCtx.suspend(time)\n    const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n    analyzerNode.getByteFrequencyData(frequencyData)\n    await audioCtx.resume()\n    return frequencyData\n  }\n  render () {\n    const offsetPixels = this.props.audioBuffer && this.canvas ? Math.min(\n      Math.max(this.props.currentTime / this.state.secondsPerPixel - this.canvas.width / 2, 0),\n      this.props.audioBuffer.duration / this.state.secondsPerPixel - this.canvas.width\n    ) : 0\n    return <div className='timeline'>\n      <div className='frequencygraph' ref={el => { this.graphContainer = el }}>\n        <canvas\n          ref={(canvas) => { this.canvas = canvas }}\n          width={this.state.graphWidth}\n          height={1024}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n      </div>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} onChange={() => {}} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  render () {\n    return <div className='playpause'>\n      <button onClick={this.props.onChange} disabled={this.props.disabled}>{this.props.isPlaying ? 'Pause' : 'Play'}</button>\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      isWorking: false\n    }\n  }\n  render () {\n    return <div className='audioopener'>\n      <input type='file' id='input' accept='audio/*' onChange={(e) => this.openFile(e)} disabled={this.state.isWorking} />\n    </div>\n  }\n  openFile (e) {\n    if (!e.target.files.length) return\n    this.setState({ isWorking: true })\n    const reader = new window.FileReader()\n    reader.onload = async (e) => {\n      const buffer = await this.props.audioContext.decodeAudioData(e.target.result)\n      this.setState({ isWorking: false })\n      this.props.onOpen(buffer)\n    }\n    reader.readAsArrayBuffer(e.target.files[0])\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Timeline from './Timeline/Timeline'\nimport ProgressiveTimeline from './ProgressiveTimeline/Timeline'\nimport PlayPause from './PlayPause/PlayPause'\nimport AudioOpener from '../AudioOpener/AudioOpener'\n// import audioBufferToWave from '../../util/audioBufferToWave'\n\nimport './style.css'\n\nexport default class Player extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      audioBuffer: null,\n      audioBufferKey: 0,\n      currentTime: 0, // time in playing file (in seconds)\n      startTime: 0, // time of file start in audioContext's reference system\n      isPlaying: false\n    }\n    this.audioContext = new window.AudioContext()\n    this.sourceNode = null\n  }\n  componentWillUnmount () {\n    this.audioContext.close()\n  }\n  render () {\n    const TimelineToRender = this.props.progressiveTimeline\n      ? ProgressiveTimeline\n      : Timeline\n    return <div className='player'>\n      <TimelineToRender audioBuffer={this.state.audioBuffer} currentTime={this.state.currentTime} onCurrentTimeChange={(e) => this.currentTimeChanged(+e.target.value)} key={this.state.audioBufferKey} />\n      <PlayPause isPlaying={this.state.isPlaying} onChange={this.state.isPlaying ? () => this.pause() : () => this.play()} disabled={!this.state.audioBuffer} />\n      <AudioOpener audioContext={this.audioContext} onOpen={(buffer) => { this.fileOpened(buffer); this.play() }} />\n    </div>\n  }\n  fileOpened (buffer) {\n    // const func = audioBufferToWave\n    // let href = window.URL.createObjectURL(func(buffer))\n    // let a = document.createElement('a')\n    // a.download = true\n    // a.href = href\n    // document.body.appendChild(a)\n    // a.click()\n    // document.body.removeChild(a)\n    // debugger\n    this.setState((state) => ({\n      audioBuffer: buffer,\n      audioBufferKey: state.audioBufferKey + 1,\n      currentTime: 0,\n      startTime: this.audioContext.currentTime\n    }), () => {\n      if (this.state.isPlaying) {\n        this.play()\n      }\n    })\n  }\n  async play (time = this.state.currentTime) {\n    if (!this.state.audioBuffer) return\n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume()\n    }\n    if (this.sourceNode) {\n      this.sourceNode.disconnect()\n      this.sourceNode.stop()\n    }\n    this.sourceNode = this.audioContext.createBufferSource()\n    this.sourceNode.connect(this.audioContext.destination)\n    this.sourceNode.buffer = this.state.audioBuffer\n    this.sourceNode.start(0, time)\n    if (!this.state.isPlaying) {\n      window.requestAnimationFrame(() => this.updateCurrentTime())\n    }\n    this.setState({\n      isPlaying: true,\n      startTime: this.audioContext.currentTime - time\n    })\n  }\n  updateCurrentTime () {\n    this.setState(state => {\n      if (state.isPlaying) {\n        return {\n          currentTime: this.audioContext.currentTime - state.startTime\n        }\n      }\n      return {}\n    }, () => this.state.isPlaying && window.requestAnimationFrame(() => this.updateCurrentTime()))\n  }\n  async pause () {\n    this.sourceNode.disconnect()\n    this.sourceNode.stop()\n    this.sourceNode = null\n    this.setState(state => ({\n      isPlaying: false,\n      currentTime: this.audioContext.currentTime - state.startTime\n    }))\n  }\n  currentTimeChanged (time) {\n    if (this.state.isPlaying) {\n      this.play(time)\n    } else {\n      this.setState({\n        currentTime: time\n      })\n    }\n  }\n}\n","import React, { PureComponent } from 'react'\n\nexport default class WhiteNoize extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      initializing: true\n    }\n  }\n  componentDidMount () {\n    this.init()\n  }\n  componentWillUnmount () {\n    this.audioContext.close()\n  }\n  async init () {\n    this.audioContext = new window.AudioContext()\n    await this.audioContext.audioWorklet.addModule('white-noise-processor.js')\n    this.whiteNoiseNode = new window.AudioWorkletNode(this.audioContext, 'white-noise-processor')\n    this.whiteNoiseNode.connect(this.audioContext.destination)\n    this.setState({\n      initializing: false\n    })\n  }\n  render () {\n    return <div>\n      <button onClick={() => this.audioContext.resume()} disabled={!this.state.initializing}>play</button>\n      <input type='range' onChange={(e) => this.whiteNoiseNode.parameters.get('customGain').linearRampToValueAtTime(+e.target.value, this.audioContext.currentTime + 0.5)} min='0' max='1' step='0.01' />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\n\nimport AudioOpener from '../AudioOpener/AudioOpener'\n\nexport default class TracklinesDemo extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.audioContext = new window.AudioContext()\n  }\n  render () {\n    return <>\n      <AudioOpener audioContext={this.audioContext} />\n    </>\n  }\n}\n","import React, { Component } from 'react'\nimport { HashRouter, Route, Redirect } from 'react-router-dom'\nimport './App.css'\n\n// import FrequencyGraph from './components/FrequencyGraph/FrequencyGraph'\n// import SingleChannelLiveFrequencyGraph from './components/SingleChannelLiveFrequencyGraph/SingleChannelLiveFrequencyGraph'\nimport Player from './components/Player/Player'\nimport WorkletWhiteNoise from './components/WorkletWhiteNoise/WhiteNoise'\nimport TracklinesDemo from './components/TracklinesDemo/TracklinesDemo'\n\nclass App extends Component {\n  render () {\n    return <div className='App'>\n      <HashRouter>\n        {/* <ul>\n          <li><NavLink to='/player'>Player</NavLink></li>\n          <li><NavLink to='/kek'>Kektus</NavLink></li>\n        </ul> */}\n        <Route exact path='/' component={() => <Redirect to='/player' />} />\n        <Route exact path='/player' component={() => <Player />} />\n        <Route exact path='/player-progressive' component={() => <Player progressiveTimeline />} />\n        <Route exact path='/whitenoise' component={() => <WorkletWhiteNoise />} />\n        <Route exact path='/tracklines' component={() => <TracklinesDemo />} />\n      </HashRouter>\n    </div>\n  }\n}\n\nexport default App\n","import React, { StrictMode } from 'react'\nimport { render } from 'react-dom'\n// import { Provider } from 'react-redux'\n// import { createStore, applyMiddleware, compose } from 'redux'\n// import thunk from 'redux-thunk'\n\nimport App from './App'\n// import * as serviceWorker from './serviceWorker';\n\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}