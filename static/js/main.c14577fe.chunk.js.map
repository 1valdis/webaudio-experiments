{"version":3,"sources":["components/Player/Timeline/LoadingIndicator/LoadingIndicator.jsx","components/Player/Timeline/Timeline.jsx","components/Player/ProgressiveTimeline/Timeline.jsx","components/Player/PlayPause/PlayPause.jsx","components/AudioOpener/AudioOpener.jsx","components/Player/Player.jsx","components/WorkletWhiteNoise/WhiteNoise.jsx","components/TracklinesDemo/TracklinesDemo.jsx","App.jsx","index.js"],"names":["LoadingIndicator","props","hidden","percentage","react_default","a","createElement","className","concat","Timeline","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","secondsPerPixel","renderingPercentage","resize","bind","assertThisInitialized","_this2","audioBuffer","renderCanvas","window","addEventListener","blob","Blob","type","workerUrl","URL","createObjectURL","worker","Worker","ctx","canvas","getContext","onmessage","e","imageData","ImageData","Uint8ClampedArray","data","buffer","width","height","putImageData","removeEventListener","terminate","revokeObjectURL","audioCtx","_this3","setState","Math","floor","currentTime","duration","requestAnimationFrame","updateRenderingPercentage","ceil","OfflineAudioContext","sampleRate","sourceNode","createBufferSource","analyzerNode","createAnalyser","fftSize","smoothingTimeConstant","connect","destination","start","suspendTimes","from","value","index","_this4","frequencySlicesByTimePromises","map","_ref","asyncToGenerator","regenerator_default","mark","_callee","time","frequencyData","wrap","_context","prev","next","suspend","Uint8Array","frequencyBinCount","getByteFrequencyData","resume","abrupt","stop","_x","startRendering","Promise","all","frequencySlicesByTime","frequencySlicesByTimeBuffers","array","postMessage","forceUpdate","_this5","offsetPixels","min","max","parentElement","clientWidth","ref","style","marginLeft","left","toString","step","onInput","onCurrentTimeChange","onChange","PureComponent","renderFrequencyDataAroundCurrentTime","throttle","graphContainer","offscreen","transferControlToOffscreen","totalWidth","currentlyRendering","notRenderedSlices","IntegerRange","startPixel","round","endPixel","rangeToRender","intersect","subtract","numberOfChannels","promises","push","slice","getFrequencyDataAtTime","sent","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","done","_loop","slicesForWorker","slices","end","el","graphWidth","onClick","disabled","isPlaying","isWorking","id","accept","openFile","target","files","reader","FileReader","onload","audioContext","decodeAudioData","result","onOpen","readAsArrayBuffer","Player","audioBufferKey","startTime","AudioContext","close","TimelineToRender","progressiveTimeline","ProgressiveTimeline","currentTimeChanged","key","PlayPause_Timeline","pause","play","AudioOpener_Timeline","fileOpened","disconnect","updateCurrentTime","_this6","WhiteNoize","initializing","init","audioWorklet","addModule","whiteNoiseNode","AudioWorkletNode","parameters","get","linearRampToValueAtTime","TracklinesDemo","Fragment","App","react_router_dom","react_router","exact","path","component","to","Player_Player","WhiteNoise_WhiteNoize","TracklinesDemo_TracklinesDemo","Component","render","react","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c14577fe.chunk.js","sourcesContent":["import React from 'react'\n\nimport './style.css'\n\nexport default (props) => {\n  if (props.hidden) return null\n  else if (props.percentage) {\n    return <div className='loading'>{`Loading... ${props.percentage}%`}</div>\n  } else {\n    return <div className='loading'>Loading...</div>\n  }\n}\n","import React, { PureComponent } from 'react'\n\nimport LoadingIndicator from './LoadingIndicator/LoadingIndicator'\n\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02,\n      renderingPercentage: 0\n    }\n    this.resize = this.resize.bind(this)\n  }\n  componentDidMount () {\n    if (this.props.audioBuffer) { this.renderCanvas() }\n    window.addEventListener('resize', this.resize)\n\n    const workerCode = `\n    const gradient = [ [0,0,0], [0,0,1], [0,0,3], [0,0,4], [0,0,6], [0,0,7], [0,0,9], [0,0,10], [0,0,12], [0,0,13], [0,0,15], [0,0,16], [0,0,18], [0,0,19], [0,0,21], [0,0,22], [0,0,24], [0,0,25], [0,0,26], [0,0,28], [0,0,29], [0,0,31], [0,0,32], [0,0,34], [0,0,35], [0,0,37], [0,0,38], [0,0,40], [0,0,41], [0,0,43], [0,0,44], [0,0,46], [0,0,47], [0,0,49], [0,0,50], [0,0,51], [0,0,53], [0,0,54], [0,0,56], [0,0,57], [0,0,59], [0,0,60], [0,0,62], [0,0,63], [0,0,65], [0,0,66], [0,0,68], [0,0,69], [0,0,71], [0,0,72], [0,0,74], [0,0,75], [0,0,76], [0,0,78], [0,0,79], [0,0,81], [0,0,82], [0,0,84], [0,0,85], [0,0,87], [0,0,88], [0,0,90], [0,0,91], [0,0,93], [0,0,94], [0,0,96], [0,0,97], [0,0,99], [0,0,100], [2,0,101], [4,0,101], [6,0,102], [8,0,102], [10,0,103], [11,0,103], [13,0,104], [15,0,104], [17,0,105], [19,0,105], [21,0,106], [23,0,106], [25,0,107], [27,0,107], [29,0,108], [30,0,108], [32,0,109], [34,0,110], [36,0,110], [38,0,111], [40,0,111], [42,0,112], [44,0,112], [46,0,113], [48,0,113], [49,0,114], [51,0,114], [53,0,115], [57,0,116], [59,0,116], [61,0,117], [63,0,118], [65,0,118], [67,0,119], [68,0,119], [70,0,120], [72,0,120], [74,0,121], [76,0,121], [78,0,122], [80,0,122], [82,0,123], [84,0,123], [86,0,124], [87,0,124], [89,0,125], [91,0,125], [93,0,126], [95,0,127], [97,0,127], [99,0,128], [101,0,128], [103,0,129], [105,0,129], [106,0,130], [108,0,130], [110,0,131], [112,0,131], [114,0,132], [116,0,132], [118,0,133], [120,0,133], [122,0,134], [124,0,135], [125,0,135], [127,0,136], [129,0,136], [131,0,137], [133,0,137], [135,0,138], [137,0,138], [139,0,139], [141,0,139], [143,0,140], [144,0,140], [146,0,141], [148,0,141], [150,0,142], [152,0,142], [154,0,143], [156,4,142], [158,8,142], [160,11,141], [162,15,141], [165,19,140], [165,19,140], [167,23,140], [169,27,139], [171,31,139], [173,34,138], [175,38,137], [177,42,137], [179,46,136], [181,50,136], [183,53,135], [186,57,135], [188,61,134], [190,65,133], [192,69,133], [194,72,132], [194,72,132], [196,76,132], [198,80,131], [200,84,131], [202,88,130], [205,92,130], [207,95,129], [209,99,128], [211,103,128], [213,107,127], [215,111,127], [217,114,126], [219,118,126], [219,118,126], [221,122,125], [223,126,124], [226,130,124], [228,133,123], [230,137,123], [232,141,122], [234,145,122], [236,149,121], [236,149,121], [238,153,121], [240,156,120], [242,160,119], [244,164,119], [247,168,118], [249,172,118], [251,175,117], [253,179,117], [255,183,116], [255,184,119], [255,186,121], [255,187,124], [255,188,126], [255,190,129], [255,191,131], [255,192,134], [255,193,136], [255,195,139], [255,196,141], [255,197,144], [255,199,146], [255,200,149], [255,201,151], [255,203,154], [255,204,156], [255,205,159], [255,207,161], [255,208,164], [255,209,167], [255,210,169], [255,212,172], [255,213,174], [255,214,177], [255,216,179], [255,217,182], [255,218,184], [255,220,187], [255,221,189], [255,222,192], [255,224,194], [255,225,197], [255,226,199], [255,228,202], [255,229,204], [255,230,207], [255,231,210], [255,233,212], [255,234,215], [255,235,217], [255,237,220], [255,238,222], [255,239,225], [255,241,227], [255,242,230], [255,243,232], [255,245,235], [255,246,237], [255,247,240], [255,248,242], [255,250,245], [255,251,247], [255,252,250], [255,254,252], [255,255,255]]\n    let ctx = null\n    onmessage = e => {\n      if (e.data.canvas) ctx = e.data.canvas.getContext(\"2d\")\n      else {\n        const arrays = e.data.map(buffer => new Uint8Array(buffer))\n        const width = arrays.length\n        const height = arrays[0].length\n        const imageData = new ImageData(width, height)\n\n        const data = new Uint32Array(imageData.data.buffer)\n\n        for (let y = 0; y < height; ++y) {\n          for (let x = 0; x < width; ++x) {\n            const value = arrays[x][height - y - 1]\n            data[y * width + x] =\n                    (255 << 24) | // alpha\n                    (gradient[value][2] << 16) | // blue\n                    (gradient[value][1] << 8) | // green\n                    gradient[value][0] // red\n          }\n        }\n        postMessage({buffer: imageData.data.buffer, width: imageData.width, height: imageData.height}, [imageData.data.buffer])\n      }\n    }\n  `\n    const blob = new window.Blob([workerCode], { type: 'text/javascript' })\n    this.workerUrl = URL.createObjectURL(blob)\n    this.worker = new window.Worker(this.workerUrl)\n    this.ctx = this.canvas.getContext('2d')\n    this.worker.onmessage = e => {\n      const imageData = new window.ImageData(new Uint8ClampedArray(e.data.buffer), e.data.width, e.data.height)\n      this.canvas.width = e.data.width\n      this.canvas.height = e.data.height\n      this.ctx.putImageData(imageData, 0, 0)\n    }\n  }\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.resize)\n    this.worker.terminate()\n    URL.revokeObjectURL(this.workerUrl)\n  }\n  updateRenderingPercentage (audioCtx, audioBuffer) {\n    this.setState({\n      renderingPercentage: Math.floor(audioCtx.currentTime / audioBuffer.duration * 100)\n    })\n    if (audioCtx.currentTime !== this.props.audioBuffer.duration) {\n      window.requestAnimationFrame(() => this.updateRenderingPercentage(audioCtx, audioBuffer))\n    }\n  }\n  async renderCanvas () {\n    const width = Math.ceil(this.props.audioBuffer ? this.props.audioBuffer.duration / this.state.secondsPerPixel : 0)\n    const height = 1024\n    const audioCtx = new window.OfflineAudioContext(2, this.props.audioBuffer.length, this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = height * 2\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start()\n\n    const suspendTimes = Array.from({ length: width }, (value, index) => this.state.secondsPerPixel * index)\n    const frequencySlicesByTimePromises = suspendTimes\n      .map(async time => {\n        await audioCtx.suspend(time)\n        const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n        analyzerNode.getByteFrequencyData(frequencyData)\n        await audioCtx.resume()\n        return frequencyData\n      })\n    this.updateRenderingPercentage(audioCtx, this.props.audioBuffer)\n    await audioCtx.startRendering()\n    const frequencySlicesByTime = await Promise.all(frequencySlicesByTimePromises)\n    const frequencySlicesByTimeBuffers = frequencySlicesByTime.map(array => array.buffer)\n    this.worker.postMessage(frequencySlicesByTimeBuffers, frequencySlicesByTimeBuffers)\n  }\n  resize () {\n    if (this.props.audioBuffer) {\n      this.forceUpdate()\n    }\n  }\n  render () {\n    const offsetPixels = Math.min(\n      this.ctx ? Math.max(this.props.currentTime / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth / 2, 0) : 0,\n      this.ctx ? this.props.audioBuffer.duration / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth : 0\n    )\n    return <div className='timeline'>\n      <div className='frequencygraph'>\n        <canvas\n          ref={canvas => { this.canvas = canvas }}\n          style={{ marginLeft: -offsetPixels }}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n        <LoadingIndicator hidden={!this.props.audioBuffer || this.state.renderingPercentage === 100} percentage={this.state.renderingPercentage} />\n      </div>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} onChange={() => {}} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport IntegerRange from 'multi-integer-range'\nimport './style.css'\nimport throttle from 'lodash.throttle'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02\n    }\n    // this.resize = this.resize.bind(this)\n    this.worker = new window.Worker('timeline-renderer-worker.js')\n    this.renderFrequencyDataAroundCurrentTime = throttle(this.renderFrequencyDataAroundCurrentTime, 300)\n  }\n  componentDidMount () {\n    // window.addEventListener('resize', this.resize)\n\n    this.canvas.width = this.graphContainer.clientWidth\n    const offscreen = this.canvas.transferControlToOffscreen()\n    this.worker.postMessage({ canvas: offscreen, secondsPerPixel: this.state.secondsPerPixel, totalWidth: this.props.audioBuffer ? Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel) : 0 }, [offscreen])\n    this.renderFrequencyDataAroundCurrentTime()\n  }\n  componentDidUpdate () {\n    this.worker.postMessage({ currentTime: this.props.currentTime })\n    this.renderFrequencyDataAroundCurrentTime()\n  }\n  componentWillUnmount () {\n    // window.removeEventListener('resize', this.resize)\n    this.worker.terminate()\n  }\n  async renderFrequencyDataAroundCurrentTime () {\n    if (!this.props.audioBuffer) return\n\n    if (this.currentlyRendering) return\n\n    if (!this.graphContainer) return\n\n    if (!this.frequencySlicesByTime) {\n      this.notRenderedSlices = new IntegerRange([[0, Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel)]])\n      this.frequencySlicesByTime = new Array(Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel))\n    }\n\n    const startPixel = Math.max(\n      0,\n      Math.round(this.props.currentTime / this.state.secondsPerPixel - this.graphContainer.clientWidth)\n    )\n    const endPixel = Math.min(\n      Math.ceil(this.props.audioBuffer.duration / this.state.secondsPerPixel) - 1,\n      Math.round(this.props.currentTime / this.state.secondsPerPixel + this.graphContainer.clientWidth)\n    )\n\n    const rangeToRender = new IntegerRange([[startPixel, endPixel]])\n      .intersect(this.notRenderedSlices)\n    this.notRenderedSlices.subtract(rangeToRender)\n\n    if (!rangeToRender.length()) return\n    this.currentlyRendering = true\n    const audioCtx = new window.OfflineAudioContext(this.props.audioBuffer.numberOfChannels, ~~((rangeToRender.max() - rangeToRender.min() + 2) * this.state.secondsPerPixel * this.props.audioBuffer.sampleRate), this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = 2048\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start(0, rangeToRender.min() * this.state.secondsPerPixel)\n\n    const promises = []\n    // todo we should have at least 2*fftSize samples of data before analyze\n    for (const index of rangeToRender) {\n      const time = (index - rangeToRender.min() + 1) * this.state.secondsPerPixel\n      promises.push((async () => {\n        const slice = await this.getFrequencyDataAtTime(audioCtx, analyzerNode, time)\n        this.frequencySlicesByTime[index] = slice\n      })())\n    }\n    await audioCtx.startRendering()\n    await Promise.all(\n      promises\n    )\n\n    this.currentlyRendering = false\n    const slicesForWorker = this.frequencySlicesByTime.slice(rangeToRender.min(), rangeToRender.max() + 1).map(array => array.buffer)\n    this.worker.postMessage({ slices: slicesForWorker, start: rangeToRender.min(), end: rangeToRender.max() }, slicesForWorker)\n  }\n  async getFrequencyDataAtTime (audioCtx, analyzerNode, time) {\n    await audioCtx.suspend(time)\n    const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n    analyzerNode.getByteFrequencyData(frequencyData)\n    await audioCtx.resume()\n    return frequencyData\n  }\n  render () {\n    const offsetPixels = this.props.audioBuffer && this.canvas ? Math.min(\n      Math.max(this.props.currentTime / this.state.secondsPerPixel - this.canvas.width / 2, 0),\n      this.props.audioBuffer.duration / this.state.secondsPerPixel - this.canvas.width\n    ) : 0\n    return <div className='timeline'>\n      <div className='frequencygraph' ref={el => { this.graphContainer = el }}>\n        <canvas\n          ref={(canvas) => { this.canvas = canvas }}\n          width={this.state.graphWidth}\n          height={1024}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n      </div>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} onChange={() => {}} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  render () {\n    return <div className='playpause'>\n      <button onClick={this.props.onChange} disabled={this.props.disabled}>{this.props.isPlaying ? 'Pause' : 'Play'}</button>\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      isWorking: false\n    }\n  }\n  render () {\n    return <div className='audioopener'>\n      <input type='file' id='input' accept='audio/*' onChange={(e) => this.openFile(e)} disabled={this.state.isWorking} />\n    </div>\n  }\n  openFile (e) {\n    if (!e.target.files.length) return\n    this.setState({ isWorking: true })\n    const reader = new window.FileReader()\n    reader.onload = async (e) => {\n      const buffer = await this.props.audioContext.decodeAudioData(e.target.result)\n      this.setState({ isWorking: false })\n      this.props.onOpen(buffer)\n    }\n    reader.readAsArrayBuffer(e.target.files[0])\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Timeline from './Timeline/Timeline'\nimport ProgressiveTimeline from './ProgressiveTimeline/Timeline'\nimport PlayPause from './PlayPause/PlayPause'\nimport AudioOpener from '../AudioOpener/AudioOpener'\n// import audioBufferToWave from '../../util/audioBufferToWave'\n\nimport './style.css'\n\nexport default class Player extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      audioBuffer: null,\n      audioBufferKey: 0,\n      currentTime: 0, // time in playing file (in seconds)\n      startTime: 0, // time of file start in audioContext's reference system\n      isPlaying: false\n    }\n    this.audioContext = new window.AudioContext()\n    this.sourceNode = null\n  }\n  componentWillUnmount () {\n    this.audioContext.close()\n  }\n  render () {\n    const TimelineToRender = this.props.progressiveTimeline\n      ? ProgressiveTimeline\n      : Timeline\n    return <div className='player'>\n      <TimelineToRender audioBuffer={this.state.audioBuffer} currentTime={this.state.currentTime} onCurrentTimeChange={(e) => this.currentTimeChanged(+e.target.value)} key={this.state.audioBufferKey} />\n      <PlayPause isPlaying={this.state.isPlaying} onChange={this.state.isPlaying ? () => this.pause() : () => this.play()} disabled={!this.state.audioBuffer} />\n      <AudioOpener audioContext={this.audioContext} onOpen={(buffer) => { this.fileOpened(buffer); this.play() }} />\n    </div>\n  }\n  fileOpened (buffer) {\n    // const func = audioBufferToWave\n    // let href = window.URL.createObjectURL(func(buffer))\n    // let a = document.createElement('a')\n    // a.download = true\n    // a.href = href\n    // document.body.appendChild(a)\n    // a.click()\n    // document.body.removeChild(a)\n    // debugger\n    this.setState((state) => ({\n      audioBuffer: buffer,\n      audioBufferKey: state.audioBufferKey + 1,\n      currentTime: 0,\n      startTime: this.audioContext.currentTime\n    }), () => {\n      if (this.state.isPlaying) {\n        this.play()\n      }\n    })\n  }\n  async play (time = this.state.currentTime) {\n    if (!this.state.audioBuffer) return\n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume()\n    }\n    if (this.sourceNode) {\n      this.sourceNode.disconnect()\n      this.sourceNode.stop()\n    }\n    this.sourceNode = this.audioContext.createBufferSource()\n    this.sourceNode.connect(this.audioContext.destination)\n    this.sourceNode.buffer = this.state.audioBuffer\n    this.sourceNode.start(0, time)\n    if (!this.state.isPlaying) {\n      window.requestAnimationFrame(() => this.updateCurrentTime())\n    }\n    this.setState({\n      isPlaying: true,\n      startTime: this.audioContext.currentTime - time\n    })\n  }\n  updateCurrentTime () {\n    this.setState(state => {\n      if (state.isPlaying) {\n        return {\n          currentTime: this.audioContext.currentTime - state.startTime\n        }\n      }\n      return {}\n    }, () => this.state.isPlaying && window.requestAnimationFrame(() => this.updateCurrentTime()))\n  }\n  async pause () {\n    this.sourceNode.disconnect()\n    this.sourceNode.stop()\n    this.sourceNode = null\n    this.setState(state => ({\n      isPlaying: false,\n      currentTime: this.audioContext.currentTime - state.startTime\n    }))\n  }\n  currentTimeChanged (time) {\n    if (this.state.isPlaying) {\n      this.play(time)\n    } else {\n      this.setState({\n        currentTime: time\n      })\n    }\n  }\n}\n","import React, { PureComponent } from 'react'\n\nexport default class WhiteNoize extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      initializing: true\n    }\n  }\n  componentDidMount () {\n    this.init()\n  }\n  componentWillUnmount () {\n    this.audioContext.close()\n  }\n  async init () {\n    this.audioContext = new window.AudioContext()\n    await this.audioContext.audioWorklet.addModule('white-noise-processor.js')\n    this.whiteNoiseNode = new window.AudioWorkletNode(this.audioContext, 'white-noise-processor')\n    this.whiteNoiseNode.connect(this.audioContext.destination)\n    this.setState({\n      initializing: false\n    })\n  }\n  render () {\n    return <div>\n      <button onClick={() => this.audioContext.resume()} disabled={!this.state.initializing}>play</button>\n      <input type='range' onChange={(e) => this.whiteNoiseNode.parameters.get('customGain').linearRampToValueAtTime(+e.target.value, this.audioContext.currentTime + 0.5)} min='0' max='1' step='0.01' />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\n\nimport AudioOpener from '../AudioOpener/AudioOpener'\n\nexport default class TracklinesDemo extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.audioContext = new window.AudioContext()\n  }\n  render () {\n    return <>\n      <AudioOpener audioContext={this.audioContext} />\n    </>\n  }\n}\n","import React, { Component } from 'react'\nimport { HashRouter, Route, Redirect } from 'react-router-dom'\nimport './App.css'\n\n// import FrequencyGraph from './components/FrequencyGraph/FrequencyGraph'\n// import SingleChannelLiveFrequencyGraph from './components/SingleChannelLiveFrequencyGraph/SingleChannelLiveFrequencyGraph'\nimport Player from './components/Player/Player'\nimport WorkletWhiteNoise from './components/WorkletWhiteNoise/WhiteNoise'\nimport TracklinesDemo from './components/TracklinesDemo/TracklinesDemo'\n\nclass App extends Component {\n  render () {\n    return <div className='App'>\n      <HashRouter>\n        {/* <ul>\n          <li><NavLink to='/player'>Player</NavLink></li>\n          <li><NavLink to='/kek'>Kektus</NavLink></li>\n        </ul> */}\n        <Route exact path='/' component={() => <Redirect to='/player' />} />\n        <Route exact path='/player' component={() => <Player />} />\n        <Route exact path='/player-progressive' component={() => <Player progressiveTimeline />} />\n        <Route exact path='/whitenoise' component={() => <WorkletWhiteNoise />} />\n        <Route exact path='/tracklines' component={() => <TracklinesDemo />} />\n      </HashRouter>\n    </div>\n  }\n}\n\nexport default App\n","import React, { StrictMode } from 'react'\nimport { render } from 'react-dom'\n// import { Provider } from 'react-redux'\n// import { createStore, applyMiddleware, compose } from 'redux'\n// import thunk from 'redux-thunk'\n\nimport App from './App'\n// import * as serviceWorker from './serviceWorker';\n\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}