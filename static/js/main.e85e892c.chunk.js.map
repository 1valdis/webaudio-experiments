{"version":3,"sources":["components/Player/Timeline/Timeline.jsx","components/Player/PlayPause/PlayPause.jsx","components/Player/AudioOpener/AudioOpener.jsx","components/Player/Player.jsx","App.jsx","index.js"],"names":["Timeline","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","secondsPerPixel","resize","bind","assertThisInitialized","props","audioBuffer","renderCanvas","window","addEventListener","removeEventListener","ctx","canvas","width","Math","ceil","duration","height","audioCtx","OfflineAudioContext","sampleRate","sourceNode","createBufferSource","buffer","analyzerNode","createAnalyser","fftSize","smoothingTimeConstant","connect","destination","start","suspendTimes","from","value","index","_this2","frequencySlicesByTimePromises","map","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","time","frequencyData","wrap","_context","prev","next","suspend","Uint8Array","frequencyBinCount","getByteFrequencyData","resume","abrupt","stop","_x","rendering","startRendering","Promise","all","frequencySlicesByTime","canvasWidth","canvasHeight","imageData","getImageData","buf","ArrayBuffer","data","buf8","Uint8ClampedArray","Uint32Array","y","x","gradient","set","putImageData","forceUpdate","_this3","offsetPixels","min","max","currentTime","parentElement","clientWidth","react_default","createElement","className","ref","getContext","style","marginLeft","left","type","toString","step","onInput","onCurrentTimeChange","PureComponent","onClick","onChange","disabled","isPlaying","isWorking","id","accept","e","openFile","target","files","setState","reader","FileReader","onload","audioContext","decodeAudioData","result","sent","onOpen","readAsArrayBuffer","Player","audioBufferKey","startTime","AudioContext","Timeline_Timeline","currentTimeChanged","key","PlayPause_Timeline","pause","play","AudioOpener_Timeline","fileOpened","disconnect","requestAnimationFrame","_this4","updateCurrentTime","_this5","_this6","App","Player_Player","Component","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","render","react","src_App_0","document","getElementById"],"mappings":"0zGAIqBA,qBACnB,SAAAA,IAAsB,IAAAC,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAANC,EAAM,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANF,EAAME,GAAAJ,UAAAI,GAAA,OACpBT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAH,IAAAc,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAASP,MACJQ,MAAQ,CACXC,gBAAiB,KAEnBhB,EAAKiB,OAASjB,EAAKiB,OAAOC,KAAZjB,OAAAkB,EAAA,EAAAlB,CAAAD,IALMA,mFAQhBG,KAAKiB,MAAMC,aAAelB,KAAKmB,eACnCC,OAAOC,iBAAiB,SAAUrB,KAAKc,uDAGvCM,OAAOE,oBAAoB,SAAUtB,KAAKc,yMAG1Cd,KAAKuB,IAAIC,OAAOC,MAAQC,KAAKC,KAAK3B,KAAKiB,MAAMC,YAAclB,KAAKiB,MAAMC,YAAYU,SAAW5B,KAAKY,MAAMC,gBAAkB,GAC1Hb,KAAKuB,IAAIC,OAAOK,OAAS,KAEnBC,EAAW,IAAIV,OAAOW,oBAAoB,EAAG/B,KAAKiB,MAAMC,YAAYf,OAAQH,KAAKiB,MAAMC,YAAYc,aAEnGC,EAAaH,EAASI,sBACjBC,OAASnC,KAAKiB,MAAMC,aACzBkB,EAAeN,EAASO,kBACjBC,QAAmC,EAAzBtC,KAAKuB,IAAIC,OAAOK,OACvCO,EAAaG,sBAAwB,EACrCN,EAAWO,QAAQJ,GACnBA,EAAaI,QAAQV,EAASW,aAC9BR,EAAWS,QAELC,EAAetC,MAAMuC,KAAK,CAAEzC,OAAQH,KAAKuB,IAAIC,OAAOC,OAAS,SAACoB,EAAOC,GAAR,OAAkBC,EAAKnC,MAAMC,gBAAkBiC,IAC5GE,EAAgCL,EACnCM,IADmC,eAAAC,EAAApD,OAAAqD,EAAA,EAAArD,CAAAsD,EAAAC,EAAAC,KAC/B,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACG/B,EAASgC,QAAQN,GADpB,cAEGC,EAAgB,IAAIM,WAAW3B,EAAa4B,mBAClD5B,EAAa6B,qBAAqBR,GAH/BE,EAAAE,KAAA,EAIG/B,EAASoC,SAJZ,cAAAP,EAAAQ,OAAA,SAKIV,GALJ,wBAAAE,EAAAS,SAAAb,MAD+B,gBAAAc,GAAA,OAAAnB,EAAAxC,MAAAV,KAAAE,YAAA,IAQhCoE,EAAYxC,EAASyC,2BACSC,QAAQC,IAAIzB,WAShD,IATM0B,SACAC,EAAc3E,KAAKuB,IAAIC,OAAOC,MAC9BmD,EAAe5E,KAAKuB,IAAIC,OAAOK,OAC/BgD,EAAY7E,KAAKuB,IAAIuD,aAAa,EAAG,EAAGH,EAAaC,GAErDG,EAAM,IAAIC,YAAYH,EAAUI,KAAK9E,QACrC+E,EAAO,IAAIC,kBAAkBJ,GAC7BE,EAAO,IAAIG,YAAYL,GAEpBM,EAAI,EAAGA,EAAIT,IAAgBS,EAClC,IAASC,EAAI,EAAGA,EAAIX,IAAeW,EAC3BzC,EAAQ6B,EAAsBY,GAAGV,EAAeS,EAAI,GAC1DJ,EAAKI,EAAIV,EAAcW,GACd,KAAO,GACPC,EAAS1C,GAAO,IAAM,GACtB0C,EAAS1C,GAAO,IAAM,EACvB0C,EAAS1C,GAAO,UAG5BgC,EAAUI,KAAKO,IAAIN,GACnBlF,KAAKuB,IAAIkE,aAAaZ,EAAW,EAAG,aAC9BP,sIAGFtE,KAAKiB,MAAMC,aACblB,KAAK0F,+CAGC,IAAAC,EAAA3F,KACF4F,EAAelE,KAAKmE,IACxB7F,KAAKuB,IAAMG,KAAKoE,IAAI9F,KAAKiB,MAAM8E,YAAc/F,KAAKY,MAAMC,gBAAkBb,KAAKuB,IAAIC,OAAOwE,cAAcC,YAAc,EAAG,GAAK,EAC9HjG,KAAKuB,IAAMvB,KAAKiB,MAAMC,YAAYU,SAAW5B,KAAKY,MAAMC,gBAAkBb,KAAKuB,IAAIC,OAAOwE,cAAcC,YAAc,GAExH,OAAOC,EAAA7C,EAAA8C,cAAA,OAAKC,UAAU,YACpBF,EAAA7C,EAAA8C,cAAA,OAAKC,UAAU,kBACbF,EAAA7C,EAAA8C,cAAA,UACEE,IAAK,SAAA7E,GAAYmE,EAAKpE,IAAMC,GAAUA,EAAO8E,WAAW,OACxDC,MAAO,CAAEC,YAAaZ,KAExBM,EAAA7C,EAAA8C,cAAA,OAAKC,UAAU,kBAAkBG,MAAO,CAAEE,KAAMzG,KAAKiB,MAAM8E,YAAc/F,KAAKY,MAAMC,gBAAkB+E,MAExGM,EAAA7C,EAAA8C,cAAA,SAAOO,KAAK,QAAQb,IAAI,IAAIC,IAAK9F,KAAKiB,MAAMC,YAAclB,KAAKiB,MAAMC,YAAYU,SAAS+E,WAAa,IAAKC,KAAK,OAAO/D,MAAO7C,KAAKiB,MAAM8E,YAAac,QAAS7G,KAAKiB,MAAM6F,8BAjF3IC,kBCDjBpH,0LAEjB,OAAOuG,EAAA7C,EAAA8C,cAAA,OAAKC,UAAU,aACpBF,EAAA7C,EAAA8C,cAAA,UAAQa,QAAShH,KAAKiB,MAAMgG,SAAUC,SAAUlH,KAAKiB,MAAMiG,UAAWlH,KAAKiB,MAAMkG,UAAY,QAAU,gBAHvEJ,kBCAjBpH,qBACnB,SAAAA,IAAsB,IAAAC,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAANC,EAAM,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANF,EAAME,GAAAJ,UAAAI,GAAA,OACpBT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAH,IAAAc,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAASP,MACJQ,MAAQ,CACXwG,WAAW,GAHOvH,wEAMZ,IAAAkD,EAAA/C,KACR,OAAOkG,EAAA7C,EAAA8C,cAAA,OAAKC,UAAU,eACpBF,EAAA7C,EAAA8C,cAAA,SAAOO,KAAK,OAAOW,GAAG,QAAQC,OAAO,UAAUL,SAAU,SAACM,GAAD,OAAOxE,EAAKyE,SAASD,IAAIL,SAAUlH,KAAKY,MAAMwG,8CAGjGG,GAAG,IAAA5B,EAAA3F,KACX,GAAKuH,EAAEE,OAAOC,MAAMvH,OAApB,CACAH,KAAK2H,SAAS,CAAEP,WAAW,IAC3B,IAAMQ,EAAS,IAAIxG,OAAOyG,WAC1BD,EAAOE,OAAP,eAAA5E,EAAApD,OAAAqD,EAAA,EAAArD,CAAAsD,EAAAC,EAAAC,KAAgB,SAAAC,EAAOgE,GAAP,IAAApF,EAAA,OAAAiB,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACO8B,EAAK1E,MAAM8G,aAAaC,gBAAgBT,EAAEE,OAAOQ,QADxD,OACR9F,EADQwB,EAAAuE,KAEdvC,EAAKgC,SAAS,CAAEP,WAAW,IAC3BzB,EAAK1E,MAAMkH,OAAOhG,GAHJ,wBAAAwB,EAAAS,SAAAb,MAAhB,gBAAAc,GAAA,OAAAnB,EAAAxC,MAAAV,KAAAE,YAAA,GAKA0H,EAAOQ,kBAAkBb,EAAEE,OAAOC,MAAM,YArBNX,kBCIjBsB,qBACnB,SAAAA,IAAsB,IAAAzI,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqI,GAAA,QAAApI,EAAAC,UAAAC,OAANC,EAAM,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANF,EAAME,GAAAJ,UAAAI,GAAA,OACpBT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAuI,IAAA5H,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAASP,MACJQ,MAAQ,CACXM,YAAa,KACboH,eAAgB,EAChBvC,YAAa,EACbwC,UAAW,EACXpB,WAAW,GAEbtH,EAAKkI,aAAe,IAAI3G,OAAOoH,aAC/B3I,EAAKoC,WAAa,KAVEpC,wEAYZ,IAAAkD,EAAA/C,KACR,OAAOkG,EAAA7C,EAAA8C,cAAA,OAAKC,UAAU,UACpBF,EAAA7C,EAAA8C,cAACsC,EAAD,CAAUvH,YAAalB,KAAKY,MAAMM,YAAa6E,YAAa/F,KAAKY,MAAMmF,YAAae,oBAAqB,SAACS,GAAD,OAAOxE,EAAK2F,oBAAoBnB,EAAEE,OAAO5E,QAAQ8F,IAAK3I,KAAKY,MAAM0H,iBAC1KpC,EAAA7C,EAAA8C,cAACyC,EAAD,CAAWzB,UAAWnH,KAAKY,MAAMuG,UAAWF,SAAUjH,KAAKY,MAAMuG,UAAY,kBAAMpE,EAAK8F,SAAU,kBAAM9F,EAAK+F,QAAQ5B,UAAWlH,KAAKY,MAAMM,cAC3IgF,EAAA7C,EAAA8C,cAAC4C,EAAD,CAAahB,aAAc/H,KAAK+H,aAAcI,OAAQ,SAAChG,GAAaY,EAAKiG,WAAW7G,GAASY,EAAK+F,8CAG1F3G,GAAQ,IAAAwD,EAAA3F,KAClBA,KAAK2H,SAAS,SAAC/G,GAAD,MAAY,CACxBM,YAAaiB,EACbmG,eAAgB1H,EAAM0H,eAAiB,EACvCvC,YAAa,EACbwC,UAAW5C,EAAKoC,aAAahC,cAC3B,WACEJ,EAAK/E,MAAMuG,WACbxB,EAAKmD,4KAICtF,iCAAOxD,KAAKY,MAAMmF,YACvB/F,KAAKY,MAAMM,gEACgB,cAA5BlB,KAAK+H,aAAanH,sCACdZ,KAAK+H,aAAa7D,gBAEtBlE,KAAKiC,aACPjC,KAAKiC,WAAWgH,aAChBjJ,KAAKiC,WAAWmC,QAElBpE,KAAKiC,WAAajC,KAAK+H,aAAa7F,qBACpClC,KAAKiC,WAAWO,QAAQxC,KAAK+H,aAAatF,aAC1CzC,KAAKiC,WAAWE,OAASnC,KAAKY,MAAMM,YACpClB,KAAKiC,WAAWS,MAAM,EAAGc,GACpBxD,KAAKY,MAAMuG,WACd/F,OAAO8H,sBAAsB,kBAAMC,EAAKC,sBAE1CpJ,KAAK2H,SAAS,CACZR,WAAW,EACXoB,UAAWvI,KAAK+H,aAAahC,YAAcvC,mJAG1B,IAAA6F,EAAArJ,KACnBA,KAAK2H,SAAS,SAAA/G,GACZ,OAAIyI,EAAKzI,MAAMuG,UACN,CACLpB,YAAasD,EAAKtB,aAAahC,YAAcnF,EAAM2H,WAGhD,IACN,kBAAMc,EAAKzI,MAAMuG,WAAa/F,OAAO8H,sBAAsB,kBAAMG,EAAKD,2KAGzEpJ,KAAKiC,WAAWgH,aAChBjJ,KAAKiC,WAAWmC,OAChBpE,KAAKiC,WAAa,KAClBjC,KAAK2H,SAAS,SAAA/G,GAAK,MAAK,CACtBuG,WAAW,EACXpB,YAAauD,EAAKvB,aAAahC,YAAcnF,EAAM2H,0JAGnC/E,GACdxD,KAAKY,MAAMuG,UACbnH,KAAK8I,KAAKtF,GAEVxD,KAAK2H,SAAS,CACZ5B,YAAavC,WA7EeuD,kBCYrBwC,mLAVX,OAAOrD,EAAA7C,EAAA8C,cAAA,OAAKC,UAAU,OAIpBF,EAAA7C,EAAA8C,cAACqD,EAAD,cANYC,aCEOrI,OAAOsI,sCAAwCC,IAGxEC,iBACE1D,EAAA7C,EAAA8C,cAAC0D,EAAA,WAAD,KACE3D,EAAA7C,EAAA8C,cAAC2D,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.e85e892c.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport gradient from '../../gradient.json'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02\n    }\n    this.resize = this.resize.bind(this)\n  }\n  componentDidMount () {\n    if (this.props.audioBuffer) { this.renderCanvas() }\n    window.addEventListener('resize', this.resize)\n  }\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.resize)\n  }\n  async renderCanvas () {\n    this.ctx.canvas.width = Math.ceil(this.props.audioBuffer ? this.props.audioBuffer.duration / this.state.secondsPerPixel : 0)\n    this.ctx.canvas.height = 1024\n\n    const audioCtx = new window.OfflineAudioContext(2, this.props.audioBuffer.length, this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = this.ctx.canvas.height * 2\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start()\n\n    const suspendTimes = Array.from({ length: this.ctx.canvas.width }, (value, index) => this.state.secondsPerPixel * index)\n    const frequencySlicesByTimePromises = suspendTimes\n      .map(async time => {\n        await audioCtx.suspend(time)\n        const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n        analyzerNode.getByteFrequencyData(frequencyData)\n        await audioCtx.resume()\n        return frequencyData\n      })\n    const rendering = audioCtx.startRendering()\n    const frequencySlicesByTime = await Promise.all(frequencySlicesByTimePromises)\n    const canvasWidth = this.ctx.canvas.width\n    const canvasHeight = this.ctx.canvas.height\n    const imageData = this.ctx.getImageData(0, 0, canvasWidth, canvasHeight)\n\n    const buf = new ArrayBuffer(imageData.data.length)\n    const buf8 = new Uint8ClampedArray(buf)\n    const data = new Uint32Array(buf)\n\n    for (let y = 0; y < canvasHeight; ++y) {\n      for (let x = 0; x < canvasWidth; ++x) {\n        const value = frequencySlicesByTime[x][canvasHeight - y - 1]\n        data[y * canvasWidth + x] =\n                (255 << 24) | // alpha\n                (gradient[value][2] << 16) | // blue\n                (gradient[value][1] << 8) | // green\n                gradient[value][0] // red\n      }\n    }\n    imageData.data.set(buf8)\n    this.ctx.putImageData(imageData, 0, 0)\n    await rendering\n  }\n  resize () {\n    if (this.props.audioBuffer) {\n      this.forceUpdate()\n    }\n  }\n  render () {\n    const offsetPixels = Math.min(\n      this.ctx ? Math.max(this.props.currentTime / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth / 2, 0) : 0,\n      this.ctx ? this.props.audioBuffer.duration / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth : 0\n    )\n    return <div className='timeline'>\n      <div className='frequencygraph'>\n        <canvas\n          ref={canvas => { this.ctx = canvas && canvas.getContext('2d') }}\n          style={{ marginLeft: -offsetPixels }}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n      </div>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  render () {\n    return <div className='playpause'>\n      <button onClick={this.props.onChange} disabled={this.props.disabled}>{this.props.isPlaying ? 'Pause' : 'Play'}</button>\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      isWorking: false\n    }\n  }\n  render () {\n    return <div className='audioopener'>\n      <input type='file' id='input' accept='audio/*' onChange={(e) => this.openFile(e)} disabled={this.state.isWorking} />\n    </div>\n  }\n  openFile (e) {\n    if (!e.target.files.length) return\n    this.setState({ isWorking: true })\n    const reader = new window.FileReader()\n    reader.onload = async (e) => {\n      const buffer = await this.props.audioContext.decodeAudioData(e.target.result)\n      this.setState({ isWorking: false })\n      this.props.onOpen(buffer)\n    }\n    reader.readAsArrayBuffer(e.target.files[0])\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Timeline from './Timeline/Timeline'\nimport PlayPause from './PlayPause/PlayPause'\nimport AudioOpener from './AudioOpener/AudioOpener'\n\nimport './style.css'\n\nexport default class Player extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      audioBuffer: null,\n      audioBufferKey: 0,\n      currentTime: 0, // time in playing file (in seconds)\n      startTime: 0, // time of file start in audioContext's reference system\n      isPlaying: false\n    }\n    this.audioContext = new window.AudioContext()\n    this.sourceNode = null\n  }\n  render () {\n    return <div className='player'>\n      <Timeline audioBuffer={this.state.audioBuffer} currentTime={this.state.currentTime} onCurrentTimeChange={(e) => this.currentTimeChanged(+e.target.value)} key={this.state.audioBufferKey} />\n      <PlayPause isPlaying={this.state.isPlaying} onChange={this.state.isPlaying ? () => this.pause() : () => this.play()} disabled={!this.state.audioBuffer} />\n      <AudioOpener audioContext={this.audioContext} onOpen={(buffer) => { this.fileOpened(buffer); this.play() }} />\n    </div>\n  }\n  fileOpened (buffer) {\n    this.setState((state) => ({\n      audioBuffer: buffer,\n      audioBufferKey: state.audioBufferKey + 1,\n      currentTime: 0,\n      startTime: this.audioContext.currentTime\n    }), () => {\n      if (this.state.isPlaying) {\n        this.play()\n      }\n    })\n  }\n  async play (time = this.state.currentTime) {\n    if (!this.state.audioBuffer) return\n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume()\n    }\n    if (this.sourceNode) {\n      this.sourceNode.disconnect()\n      this.sourceNode.stop()\n    }\n    this.sourceNode = this.audioContext.createBufferSource()\n    this.sourceNode.connect(this.audioContext.destination)\n    this.sourceNode.buffer = this.state.audioBuffer\n    this.sourceNode.start(0, time)\n    if (!this.state.isPlaying) {\n      window.requestAnimationFrame(() => this.updateCurrentTime())\n    }\n    this.setState({\n      isPlaying: true,\n      startTime: this.audioContext.currentTime - time\n    })\n  }\n  updateCurrentTime () {\n    this.setState(state => {\n      if (this.state.isPlaying) {\n        return {\n          currentTime: this.audioContext.currentTime - state.startTime\n        }\n      }\n      return {}\n    }, () => this.state.isPlaying && window.requestAnimationFrame(() => this.updateCurrentTime()))\n  }\n  async pause () {\n    this.sourceNode.disconnect()\n    this.sourceNode.stop()\n    this.sourceNode = null\n    this.setState(state => ({\n      isPlaying: false,\n      currentTime: this.audioContext.currentTime - state.startTime\n    }))\n  }\n  currentTimeChanged (time) {\n    if (this.state.isPlaying) {\n      this.play(time)\n    } else {\n      this.setState({\n        currentTime: time\n      })\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\n// import FrequencyGraph from './components/FrequencyGraph/FrequencyGraph'\n// import LiveFrequencyGraph from './components/LiveFrequencyGraph/LiveFrequencyGraph'\nimport Player from './components/Player/Player'\n\nclass App extends Component {\n  render () {\n    return <div className='App'>\n      {/* <input type=\"file\" id=\"input\" accept=\"audio/*\" onChange={this.openFile}/>\n      <button onClick={this.play} disabled={this.state.working || !this.source}>Play</button>\n      <FrequencyGraph buffer={this.state.audioBuffer}></FrequencyGraph> */}\n      <Player />\n      {/* <LiveFrequencyGraph audioContext={this.audioContext} fromNode={this.source}></LiveFrequencyGraph> */}\n    </div>\n  }\n}\n\nexport default App\n","import React, { StrictMode } from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport App from './App'\n// import * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}