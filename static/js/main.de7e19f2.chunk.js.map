{"version":3,"sources":["components/Player/Timeline/Timeline.jsx","components/Player/PlayPause/PlayPause.jsx","components/Player/AudioOpener/AudioOpener.jsx","components/Player/Player.jsx","App.jsx","index.js"],"names":["Timeline","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","secondsPerPixel","resize","bind","assertThisInitialized","_this2","props","audioBuffer","renderCanvas","window","addEventListener","workerCode","workerScript","textContent","blob","Blob","type","workerUrl","URL","createObjectURL","worker","Worker","ctx","canvas","getContext","onmessage","e","imageData","ImageData","Uint8ClampedArray","data","buffer","width","height","putImageData","removeEventListener","terminate","revokeObjectURL","Math","ceil","duration","audioCtx","OfflineAudioContext","sampleRate","sourceNode","createBufferSource","analyzerNode","createAnalyser","fftSize","smoothingTimeConstant","connect","destination","start","suspendTimes","from","value","index","_this3","frequencySlicesByTimePromises","map","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","time","frequencyData","wrap","_context","prev","next","suspend","Uint8Array","frequencyBinCount","getByteFrequencyData","resume","abrupt","stop","_x","rendering","startRendering","Promise","all","frequencySlicesByTime","frequencySlicesByTimeBuffers","array","postMessage","console","log","forceUpdate","_this4","offsetPixels","min","max","currentTime","parentElement","clientWidth","react_default","createElement","className","ref","style","marginLeft","left","script","toString","step","onInput","onCurrentTimeChange","onChange","PureComponent","onClick","disabled","isPlaying","isWorking","id","accept","openFile","target","files","setState","reader","FileReader","onload","audioContext","decodeAudioData","result","sent","onOpen","readAsArrayBuffer","Player","audioBufferKey","startTime","AudioContext","Timeline_Timeline","currentTimeChanged","key","PlayPause_Timeline","pause","play","AudioOpener_Timeline","fileOpened","disconnect","requestAnimationFrame","updateCurrentTime","_this5","_this6","App","filter","createBiquadFilter","working","Player_Player","source","Component","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","render","react","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.de7e19f2.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport gradient from '../../gradient.json'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      secondsPerPixel: 0.02\n    }\n    this.resize = this.resize.bind(this)\n  }\n  componentDidMount () {\n    if (this.props.audioBuffer) { this.renderCanvas() }\n    window.addEventListener('resize', this.resize)\n\n    const workerCode = this.workerScript.textContent\n    const blob = new window.Blob([workerCode], { type: 'text/javascript' })\n    this.workerUrl = URL.createObjectURL(blob)\n    this.worker = new window.Worker(this.workerUrl)\n    this.ctx = this.canvas.getContext('2d')\n    // this.worker.postMessage({ canvas: offscreen }, [offscreen])\n    this.worker.onmessage = e => {\n      const imageData = new window.ImageData(new Uint8ClampedArray(e.data.buffer), e.data.width, e.data.height)\n      this.canvas.width = e.data.width\n      this.canvas.height = e.data.height\n      this.ctx.putImageData(imageData, 0, 0)\n    }\n  }\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.resize)\n    this.worker.terminate()\n    URL.revokeObjectURL(this.workerUrl)\n  }\n  async renderCanvas () {\n    const width = Math.ceil(this.props.audioBuffer ? this.props.audioBuffer.duration / this.state.secondsPerPixel : 0)\n    const height = 1024\n    const audioCtx = new window.OfflineAudioContext(2, this.props.audioBuffer.length, this.props.audioBuffer.sampleRate)\n\n    const sourceNode = audioCtx.createBufferSource()\n    sourceNode.buffer = this.props.audioBuffer\n    const analyzerNode = audioCtx.createAnalyser()\n    analyzerNode.fftSize = height * 2\n    analyzerNode.smoothingTimeConstant = 0\n    sourceNode.connect(analyzerNode)\n    analyzerNode.connect(audioCtx.destination)\n    sourceNode.start()\n\n    const suspendTimes = Array.from({ length: width }, (value, index) => this.state.secondsPerPixel * index)\n    const frequencySlicesByTimePromises = suspendTimes\n      .map(async time => {\n        await audioCtx.suspend(time)\n        const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount)\n        analyzerNode.getByteFrequencyData(frequencyData)\n        await audioCtx.resume()\n        return frequencyData\n      })\n    const rendering = audioCtx.startRendering()\n    const frequencySlicesByTime = await Promise.all(frequencySlicesByTimePromises)\n    const frequencySlicesByTimeBuffers = frequencySlicesByTime.map(array => array.buffer)\n    this.worker.postMessage(frequencySlicesByTimeBuffers, frequencySlicesByTimeBuffers)\n    console.log('message posted')\n    await rendering\n    return\n    this.ctx.canvas.width = width\n    this.ctx.canvas.height = height\n    const imageData = this.ctx.getImageData(0, 0, width, height)\n\n    const data = new Uint32Array(imageData.data.buffer)\n\n    for (let y = 0; y < height; ++y) {\n      for (let x = 0; x < width; ++x) {\n        const value = frequencySlicesByTime[x][height - y - 1]\n        data[y * width + x] =\n                (255 << 24) | // alpha\n                (gradient[value][2] << 16) | // blue\n                (gradient[value][1] << 8) | // green\n                gradient[value][0] // red\n      }\n    }\n    this.ctx.putImageData(imageData, 0, 0)\n    await rendering\n  }\n  resize () {\n    if (this.props.audioBuffer) {\n      this.forceUpdate()\n    }\n  }\n  render () {\n    const offsetPixels = Math.min(\n      this.ctx ? Math.max(this.props.currentTime / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth / 2, 0) : 0,\n      this.ctx ? this.props.audioBuffer.duration / this.state.secondsPerPixel - this.ctx.canvas.parentElement.clientWidth : 0\n    )\n    return <div className='timeline'>\n      <div className='frequencygraph'>\n        <canvas\n          ref={canvas => { this.canvas = canvas }}\n          style={{ marginLeft: -offsetPixels }}\n        />\n        <div className='timelinepointer' style={{ left: this.props.currentTime / this.state.secondsPerPixel - offsetPixels }} />\n      </div>\n      <script ref={script => { this.workerScript = script }}>{`\n        const gradient = [ [0,0,0], [0,0,1], [0,0,3], [0,0,4], [0,0,6], [0,0,7], [0,0,9], [0,0,10], [0,0,12], [0,0,13], [0,0,15], [0,0,16], [0,0,18], [0,0,19], [0,0,21], [0,0,22], [0,0,24], [0,0,25], [0,0,26], [0,0,28], [0,0,29], [0,0,31], [0,0,32], [0,0,34], [0,0,35], [0,0,37], [0,0,38], [0,0,40], [0,0,41], [0,0,43], [0,0,44], [0,0,46], [0,0,47], [0,0,49], [0,0,50], [0,0,51], [0,0,53], [0,0,54], [0,0,56], [0,0,57], [0,0,59], [0,0,60], [0,0,62], [0,0,63], [0,0,65], [0,0,66], [0,0,68], [0,0,69], [0,0,71], [0,0,72], [0,0,74], [0,0,75], [0,0,76], [0,0,78], [0,0,79], [0,0,81], [0,0,82], [0,0,84], [0,0,85], [0,0,87], [0,0,88], [0,0,90], [0,0,91], [0,0,93], [0,0,94], [0,0,96], [0,0,97], [0,0,99], [0,0,100], [2,0,101], [4,0,101], [6,0,102], [8,0,102], [10,0,103], [11,0,103], [13,0,104], [15,0,104], [17,0,105], [19,0,105], [21,0,106], [23,0,106], [25,0,107], [27,0,107], [29,0,108], [30,0,108], [32,0,109], [34,0,110], [36,0,110], [38,0,111], [40,0,111], [42,0,112], [44,0,112], [46,0,113], [48,0,113], [49,0,114], [51,0,114], [53,0,115], [57,0,116], [59,0,116], [61,0,117], [63,0,118], [65,0,118], [67,0,119], [68,0,119], [70,0,120], [72,0,120], [74,0,121], [76,0,121], [78,0,122], [80,0,122], [82,0,123], [84,0,123], [86,0,124], [87,0,124], [89,0,125], [91,0,125], [93,0,126], [95,0,127], [97,0,127], [99,0,128], [101,0,128], [103,0,129], [105,0,129], [106,0,130], [108,0,130], [110,0,131], [112,0,131], [114,0,132], [116,0,132], [118,0,133], [120,0,133], [122,0,134], [124,0,135], [125,0,135], [127,0,136], [129,0,136], [131,0,137], [133,0,137], [135,0,138], [137,0,138], [139,0,139], [141,0,139], [143,0,140], [144,0,140], [146,0,141], [148,0,141], [150,0,142], [152,0,142], [154,0,143], [156,4,142], [158,8,142], [160,11,141], [162,15,141], [165,19,140], [165,19,140], [167,23,140], [169,27,139], [171,31,139], [173,34,138], [175,38,137], [177,42,137], [179,46,136], [181,50,136], [183,53,135], [186,57,135], [188,61,134], [190,65,133], [192,69,133], [194,72,132], [194,72,132], [196,76,132], [198,80,131], [200,84,131], [202,88,130], [205,92,130], [207,95,129], [209,99,128], [211,103,128], [213,107,127], [215,111,127], [217,114,126], [219,118,126], [219,118,126], [221,122,125], [223,126,124], [226,130,124], [228,133,123], [230,137,123], [232,141,122], [234,145,122], [236,149,121], [236,149,121], [238,153,121], [240,156,120], [242,160,119], [244,164,119], [247,168,118], [249,172,118], [251,175,117], [253,179,117], [255,183,116], [255,184,119], [255,186,121], [255,187,124], [255,188,126], [255,190,129], [255,191,131], [255,192,134], [255,193,136], [255,195,139], [255,196,141], [255,197,144], [255,199,146], [255,200,149], [255,201,151], [255,203,154], [255,204,156], [255,205,159], [255,207,161], [255,208,164], [255,209,167], [255,210,169], [255,212,172], [255,213,174], [255,214,177], [255,216,179], [255,217,182], [255,218,184], [255,220,187], [255,221,189], [255,222,192], [255,224,194], [255,225,197], [255,226,199], [255,228,202], [255,229,204], [255,230,207], [255,231,210], [255,233,212], [255,234,215], [255,235,217], [255,237,220], [255,238,222], [255,239,225], [255,241,227], [255,242,230], [255,243,232], [255,245,235], [255,246,237], [255,247,240], [255,248,242], [255,250,245], [255,251,247], [255,252,250], [255,254,252], [255,255,255]]\n        let ctx = null\n        onmessage = e => {\n          if (e.data.canvas) ctx = e.data.canvas.getContext(\"2d\")\n          else {\n            const arrays = e.data.map(buffer => new Uint8Array(buffer))\n            const width = arrays.length\n            const height = arrays[0].length\n            //ctx.canvas.width = width\n            //ctx.canvas.height = height\n            //const imageData = ctx.getImageData(0, 0, width, height)\n            const imageData = new ImageData(width, height)\n\n            const data = new Uint32Array(imageData.data.buffer)\n\n            for (let y = 0; y < height; ++y) {\n              for (let x = 0; x < width; ++x) {\n                const value = arrays[x][height - y - 1]\n                data[y * width + x] =\n                        (255 << 24) | // alpha\n                        (gradient[value][2] << 16) | // blue\n                        (gradient[value][1] << 8) | // green\n                        gradient[value][0] // red\n              }\n            }\n            //debugger\n            //ctx.putImageData(imageData, 0, 0)\n            postMessage({buffer: imageData.data.buffer, width: imageData.width, height: imageData.height}, [imageData.data.buffer])\n          }\n          console.log(\"we're good\")\n        }\n      `}</script>\n      <input type='range' min='0' max={this.props.audioBuffer ? this.props.audioBuffer.duration.toString() : '0'} step='0.01' value={this.props.currentTime} onInput={this.props.onCurrentTimeChange} onChange={() => {}} />\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  render () {\n    return <div className='playpause'>\n      <button onClick={this.props.onChange} disabled={this.props.disabled}>{this.props.isPlaying ? 'Pause' : 'Play'}</button>\n    </div>\n  }\n}\n","import React, { PureComponent } from 'react'\nimport './style.css'\n\nexport default class Timeline extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      isWorking: false\n    }\n  }\n  render () {\n    return <div className='audioopener'>\n      <input type='file' id='input' accept='audio/*' onChange={(e) => this.openFile(e)} disabled={this.state.isWorking} />\n    </div>\n  }\n  openFile (e) {\n    if (!e.target.files.length) return\n    this.setState({ isWorking: true })\n    const reader = new window.FileReader()\n    reader.onload = async (e) => {\n      const buffer = await this.props.audioContext.decodeAudioData(e.target.result)\n      this.setState({ isWorking: false })\n      this.props.onOpen(buffer)\n    }\n    reader.readAsArrayBuffer(e.target.files[0])\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Timeline from './Timeline/Timeline'\nimport PlayPause from './PlayPause/PlayPause'\nimport AudioOpener from './AudioOpener/AudioOpener'\nimport audioBufferToWave from '../../util/audioBufferToWave'\n\nimport './style.css'\n\nexport default class Player extends PureComponent {\n  constructor (...args) {\n    super(...args)\n    this.state = {\n      audioBuffer: null,\n      audioBufferKey: 0,\n      currentTime: 0, // time in playing file (in seconds)\n      startTime: 0, // time of file start in audioContext's reference system\n      isPlaying: false\n    }\n    this.audioContext = new window.AudioContext()\n    this.sourceNode = null\n  }\n  render () {\n    return <div className='player'>\n      <Timeline audioBuffer={this.state.audioBuffer} currentTime={this.state.currentTime} onCurrentTimeChange={(e) => this.currentTimeChanged(+e.target.value)} key={this.state.audioBufferKey} />\n      <PlayPause isPlaying={this.state.isPlaying} onChange={this.state.isPlaying ? () => this.pause() : () => this.play()} disabled={!this.state.audioBuffer} />\n      <AudioOpener audioContext={this.audioContext} onOpen={(buffer) => { this.fileOpened(buffer); this.play() }} />\n    </div>\n  }\n  fileOpened (buffer) {\n    // const func = audioBufferToWave\n    // let href = window.URL.createObjectURL(func(buffer))\n    // let a = document.createElement('a')\n    // a.download = true\n    // a.href = href\n    // document.body.appendChild(a)\n    // a.click()\n    // document.body.removeChild(a)\n    // debugger\n    this.setState((state) => ({\n      audioBuffer: buffer,\n      audioBufferKey: state.audioBufferKey + 1,\n      currentTime: 0,\n      startTime: this.audioContext.currentTime\n    }), () => {\n      if (this.state.isPlaying) {\n        this.play()\n      }\n    })\n  }\n  async play (time = this.state.currentTime) {\n    if (!this.state.audioBuffer) return\n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume()\n    }\n    if (this.sourceNode) {\n      this.sourceNode.disconnect()\n      this.sourceNode.stop()\n    }\n    this.sourceNode = this.audioContext.createBufferSource()\n    this.sourceNode.connect(this.audioContext.destination)\n    this.sourceNode.buffer = this.state.audioBuffer\n    this.sourceNode.start(0, time)\n    if (!this.state.isPlaying) {\n      window.requestAnimationFrame(() => this.updateCurrentTime())\n    }\n    this.setState({\n      isPlaying: true,\n      startTime: this.audioContext.currentTime - time\n    })\n  }\n  updateCurrentTime () {\n    this.setState(state => {\n      if (this.state.isPlaying) {\n        return {\n          currentTime: this.audioContext.currentTime - state.startTime\n        }\n      }\n      return {}\n    }, () => this.state.isPlaying && window.requestAnimationFrame(() => this.updateCurrentTime()))\n  }\n  async pause () {\n    this.sourceNode.disconnect()\n    this.sourceNode.stop()\n    this.sourceNode = null\n    this.setState(state => ({\n      isPlaying: false,\n      currentTime: this.audioContext.currentTime - state.startTime\n    }))\n  }\n  currentTimeChanged (time) {\n    if (this.state.isPlaying) {\n      this.play(time)\n    } else {\n      this.setState({\n        currentTime: time\n      })\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\n// import FrequencyGraph from './components/FrequencyGraph/FrequencyGraph'\n// import SingleChannelLiveFrequencyGraph from './components/SingleChannelLiveFrequencyGraph/SingleChannelLiveFrequencyGraph'\nimport Player from './components/Player/Player'\n// import WorkletWhiteNoise from './components/WorkletWhiteNoise/WhiteNoise'\n\nclass App extends Component {\n  constructor (...args) {\n    super(...args)\n    this.audioContext = new AudioContext()\n    this.filter = this.audioContext.createBiquadFilter()\n    this.state = {\n      working: false,\n      audioBuffer: null\n    }\n  }\n\n  render () {\n    return <div className='App'>\n      {/* <input type=\"file\" id=\"input\" accept=\"audio/*\" onChange={this.openFile}/>\n      <button onClick={this.play} disabled={this.state.working || !this.source}>Play</button>\n      <FrequencyGraph buffer={this.state.audioBuffer}></FrequencyGraph>\n      <WorkletWhiteNoise /> */}\n      <Player />\n      {/* <input type='file' id='input' accept='audio/*' onChange={e => this.openFile(e)} />\n      <input type='range' id='frequency' onChange={(e) => { this.filter.frequency.value = +e.target.value; this.forceUpdate() }} min='0' max='10000' step='1' value={this.filter.frequency.value} />\n      <input type='range' id='detune' onChange={(e) => { this.filter.detune.value = +e.target.value; this.forceUpdate() }} min='0' max='10000' step='1' value={this.filter.detune.value} />\n      <input type='range' id='gain' onChange={(e) => { this.filter.gain.value = +e.target.value; this.forceUpdate() }} min='-50' max='50' step='0.1' value={this.filter.gain.value} />\n      <input type='range' id='Q' onChange={(e) => { this.filter.Q.value = +e.target.value; this.forceUpdate() }} min='0.001' max='10' step='0.001' value={this.filter.Q.value} />\n      <select onChange={(e) => { this.filter.type = e.target.value; this.forceUpdate() }} value={this.filter.type}>\n        <option>lowpass</option>\n        <option>highpass</option>\n        <option>bandpass</option>\n        <option>lowshelf</option>\n        <option>highshelf</option>\n        <option>peaking</option>\n        <option>notch</option>\n        <option>allpass</option>\n      </select>\n      <SingleChannelLiveFrequencyGraph audioContext={this.audioContext} fromNode={this.filter} /> */}\n    </div>\n  }\n\n  openFile (e) {\n    if (!e.target.files.length) return\n    this.setState({ working: true })\n    const reader = new window.FileReader()\n    reader.onload = async (e) => {\n      const buffer = await this.audioContext.decodeAudioData(e.target.result)\n      this.source = this.audioContext.createBufferSource()\n      this.source.buffer = buffer\n      this.source.connect(this.filter)\n      this.filter.connect(this.audioContext.destination)\n      this.play()\n      this.setState({ working: false })\n    }\n    reader.readAsArrayBuffer(e.target.files[0])\n  }\n\n  async play () {\n    console.log(this.audioContext.state)\n    if (this.audioContext.state === 'suspended') {\n      await this.audioContext.resume()\n      console.log('resumed')\n    }\n    this.source.start(0)\n    console.log('started')\n  }\n}\n\nexport default App\n","import React, { StrictMode } from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport App from './App'\n// import * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}