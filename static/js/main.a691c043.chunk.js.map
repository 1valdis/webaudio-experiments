{"version":3,"sources":["components/LiveFrequencyGraph.jsx","components/FrequencyGraph.jsx","App.js","index.js"],"names":["FrequencyGraph","PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","working","canvas","width","document","body","clientWidth","height","ctx","getContext","props","fromNode","audioContext","animating","analyzerNode","createAnalyser","fftSize","smoothingTimeConstant","connect","animate","setState","requestAnimationFrame","bind","frequencyData","Uint8Array","frequencyBinCount","getByteFrequencyData","canvasWidth","canvasHeight","imageData","getImageData","buf","ArrayBuffer","data","buf8","Uint8ClampedArray","Uint32Array","y","value","gradient","set","drawImage","putImageData","_this2","react_default","a","createElement","style","background","display","ref","App","render","className","type","id","accept","onChange","openFile","onClick","play","disabled","source","LiveFrequencyGraph_FrequencyGraph","e","reader","FileReader","onload","_ref","asyncToGenerator","regenerator_default","mark","_callee","buffer","wrap","_context","prev","next","decodeAudioData","target","result","sent","createBufferSource","destination","audioBuffer","stop","_x","readAsArrayBuffer","files","_callee2","_context2","console","log","resume","start","AudioContext","Component","ReactDOM","react","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.a691c043.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport gradient from './gradient.json'\r\n\r\nexport default class FrequencyGraph extends PureComponent {\r\n  constructor(...args) {\r\n    super(...args)\r\n    this.state = {\r\n      working: true,\r\n    }\r\n  }\r\n  async componentDidMount() {\r\n    this.canvas.width = document.body.clientWidth;\r\n    this.canvas.height = 512;\r\n    this.ctx = this.canvas.getContext('2d');\r\n  }\r\n  async componentDidUpdate() {\r\n    if (this.props.fromNode && this.props.audioContext && !this.state.animating) {\r\n      this.analyzerNode = this.props.audioContext.createAnalyser()\r\n      this.analyzerNode.fftSize = this.canvas.height * 2\r\n      this.analyzerNode.smoothingTimeConstant = 0\r\n      this.props.fromNode.connect(this.analyzerNode)\r\n      this.animate()\r\n      debugger\r\n      this.setState({animating: true})\r\n    }\r\n  }\r\n  animate() {\r\n    requestAnimationFrame(this.animate.bind(this))\r\n    const frequencyData = new Uint8Array(this.analyzerNode.frequencyBinCount);\r\n    this.analyzerNode.getByteFrequencyData(frequencyData)\r\n    const canvasWidth = this.canvas.width\r\n    const canvasHeight = this.canvas.height\r\n    const imageData = this.ctx.getImageData(canvasWidth/2-1, 0, 1, canvasHeight)\r\n\r\n    const buf = new ArrayBuffer(imageData.data.length)\r\n    const buf8 = new Uint8ClampedArray(buf)\r\n    const data = new Uint32Array(buf)\r\n    for (let y = 0; y < canvasHeight; y++) {\r\n      const value = frequencyData[y]\r\n        data[canvasHeight - y] =\r\n          (255 << 24) |    // alpha\r\n          (gradient[value][2] << 16) |    // blue\r\n          (gradient[value][1] << 8) |    // green\r\n          gradient[value][0];            // red\r\n    }\r\n\r\n    imageData.data.set(buf8)\r\n    this.ctx.drawImage(this.ctx.canvas, -1, 0)\r\n    this.ctx.putImageData(imageData, this.canvas.width/2 - 1, 0)\r\n  }\r\n  render() {\r\n    return <canvas\r\n      style={{ background: 'black', display: 'block' }}\r\n      ref={(ref) => this.canvas = ref}>\r\n    </canvas>\r\n  }\r\n}","import React, { PureComponent } from 'react'\r\nimport gradient from './gradient.json'\r\n\r\nexport default class FrequencyGraph extends PureComponent {\r\n  constructor (...args) {\r\n    super(...args)\r\n    this.state = {\r\n      working: true,\r\n    }\r\n  }\r\n  async componentDidMount () {\r\n    this.canvas.width = 4000;\r\n    this.canvas.height = 2048;\r\n    this.ctx = this.canvas.getContext('2d');\r\n  }\r\n  async componentDidUpdate () {\r\n    if (this.props.buffer) {\r\n      const audioCtx = new OfflineAudioContext(2, this.props.buffer.length, this.props.buffer.sampleRate)\r\n\r\n      const sourceNode = audioCtx.createBufferSource()\r\n      sourceNode.buffer = this.props.buffer\r\n      const analyzerNode = audioCtx.createAnalyser()\r\n      analyzerNode.fftSize = this.canvas.height*2;\r\n      analyzerNode.smoothingTimeConstant = 0;\r\n      sourceNode.connect(analyzerNode)\r\n      analyzerNode.connect(audioCtx.destination)\r\n      sourceNode.start()\r\n\r\n      const suspendTimes = Array.from({length: this.canvas.width}, (value, index) => this.props.buffer.duration / this.canvas.width * index)\r\n      const frequencySlicesByTimePromises = suspendTimes\r\n          .map(async time => {\r\n            await audioCtx.suspend(time)\r\n            const frequencyData = new Uint8Array(analyzerNode.frequencyBinCount);\r\n            analyzerNode.getByteFrequencyData(frequencyData)\r\n            await audioCtx.resume()\r\n            return frequencyData\r\n          })\r\n      const renderingPromise = audioCtx.startRendering()\r\n      const frequencySlicesByTime = await Promise.all(frequencySlicesByTimePromises)\r\n      \r\n      const canvasWidth = this.canvas.width\r\n      const canvasHeight = this.canvas.height\r\n      const imageData = this.ctx.getImageData(0, 0, canvasWidth, canvasHeight)\r\n\r\n      const buf = new ArrayBuffer(imageData.data.length)\r\n      const buf8 = new Uint8ClampedArray(buf)\r\n      const data = new Uint32Array(buf)\r\n\r\n      for (let y = 0; y < canvasHeight; ++y) {\r\n          for (let x = 0; x < canvasWidth; ++x) {\r\n              const value = frequencySlicesByTime[x][canvasHeight-y-1]\r\n              data[y * canvasWidth + x] =\r\n                  (255   << 24) |    // alpha\r\n                  (gradient[value][2] << 16) |    // blue\r\n                  (gradient[value][1] <<  8) |    // green\r\n                  gradient[value][0];            // red\r\n          }\r\n      }\r\n\r\n      imageData.data.set(buf8);\r\n      this.ctx.putImageData(imageData, 0, 0);\r\n      await renderingPromise\r\n    }\r\n  }\r\n  render () {\r\n    return <canvas\r\n      style={{background: 'black', display: 'block'}}\r\n      ref={(ref) => this.canvas = ref}>\r\n    </canvas>\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport FrequencyGraph from './components/FrequencyGraph'\r\nimport LiveFrequencyGraph from './components/LiveFrequencyGraph'\r\n\r\nclass App extends Component {\r\n  constructor(...args){\r\n    super(...args)\r\n    this.audioContext = new AudioContext()\r\n    this.state = {\r\n      working: false,\r\n      audioBuffer: null,\r\n    }\r\n  }\r\n\r\n  render = () => (\r\n    <div className=\"App\">\r\n      <input type=\"file\" id=\"input\" accept=\"audio/*\" onChange={this.openFile}/>\r\n      <button onClick={this.play} disabled={this.state.working || !this.source}>Play</button>\r\n      {/*<FrequencyGraph buffer={this.state.audioBuffer}></FrequencyGraph>*/}\r\n      <LiveFrequencyGraph audioContext={this.audioContext} fromNode={this.source}></LiveFrequencyGraph>\r\n    </div>\r\n  );\r\n\r\n  openFile = (e) => {\r\n    this.setState({working: true})\r\n    const reader = new FileReader()\r\n    reader.onload = async (e) => {\r\n      const buffer = await this.audioContext.decodeAudioData(e.target.result)\r\n      this.source = this.audioContext.createBufferSource()\r\n      this.source.buffer = buffer\r\n      this.source.connect(this.audioContext.destination)\r\n      this.setState({working: false, audioBuffer: buffer })\r\n    }\r\n    reader.readAsArrayBuffer(e.target.files[0])\r\n  }\r\n\r\n  play = async () => {\r\n    console.log(this.audioContext.state)\r\n    if (this.audioContext.state === 'suspended') {\r\n      await this.audioContext.resume()\r\n      console.log('resumed')\r\n    }\r\n    this.source.start(0)\r\n    console.log('started')\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<StrictMode><App /></StrictMode>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}